<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-KE"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-KE" /><updated>2022-08-15T16:47:23+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">th3_gr00t</title><subtitle>One and only nerd who is on a journey to being a vulnerability researcher.
</subtitle><author><name>th3gr00t</name></author><entry><title type="html">AH-CTF 2019 iamfree</title><link href="http://localhost:4000/blog/ctf/2022-08-14-ah-ctf19-iamfree/" rel="alternate" type="text/html" title="AH-CTF 2019 iamfree" /><published>2022-08-14T00:00:00+03:00</published><updated>2022-08-14T00:00:00+03:00</updated><id>http://localhost:4000/blog/ctf/ah-ctf19-iamfree</id><content type="html" xml:base="http://localhost:4000/blog/ctf/2022-08-14-ah-ctf19-iamfree/">&lt;p class=&quot;note&quot;&gt;I was second-guessing myself on releasing this post because I felt like it was too simple in general. But this is my log, we still have to log it despite its simplicity.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot; id=&quot;markdown-toc-intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#challenge&quot; id=&quot;markdown-toc-challenge&quot;&gt;Challenge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#use-after-free&quot; id=&quot;markdown-toc-use-after-free&quot;&gt;Use After Free&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#exploitation&quot; id=&quot;markdown-toc-exploitation&quot;&gt;Exploitation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;I am still trying to be consistent on blogging 😃. In Other news, I finally attained my &lt;a href=&quot;https://pwn.college/belts&quot;&gt;Yellow Belt&lt;/a&gt; (search for gr00t) from &lt;a href=&quot;https://pwn.college&quot;&gt;pwn.college&lt;/a&gt;. I am planning to get the Blue Belt before the end of the year. Received some interesting (neither sad or happy) news and solved an interview assessment (crossing my fingers on that one).&lt;/p&gt;

&lt;p&gt;Alot has been going on but we still move. This post is for a challenge from the AfricaHackon CTF competition 2019. It was in my to do list for a very long time and after years of attaining knowledge on binary exploitation and reverse engineering, I went back to tackle and solve the challenge.&lt;/p&gt;

&lt;p&gt;Sit down, relax and enjoy.&lt;/p&gt;

&lt;h2 id=&quot;challenge&quot;&gt;Challenge&lt;/h2&gt;

&lt;p&gt;The challenge was under pwn category and two files, the source code and binary were provided.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the source code. At first, when I was looking at the code (in 2019), I thought it was a buffer overflow challenge but when seeing it define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets_s&lt;/code&gt; that uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fgets&lt;/code&gt; which checks the input size, that option was out of the equation.&lt;/p&gt;

&lt;p&gt;After the competition, the challenge creator gave us another clue, &lt;a href=&quot;https://owasp.org/www-community/vulnerabilities/Using_freed_memory&quot;&gt;Use After Free&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* File: &apos;iamfree.c&apos; */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
&lt;/span&gt;
 &lt;span class=&quot;cp&quot;&gt;#define gets_s(x, len) fgets((x), (len) + 1, stdin)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moves_t&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;king&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;pawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkmate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;setuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1007&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moves_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moves_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moves_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Let play a game of chess&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Make your move : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gets_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;king&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x46524545&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x71756565&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pawn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6e333e3a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Nice move. I can&apos;t catchup&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;king&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4e455721&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4b494e47&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pawn&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      
        &lt;span class=&quot;n&quot;&gt;myMove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;myMove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkmate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkmate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;King placed in order&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;king&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x75733334&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x66743352&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pawn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x66523333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Brilliant. One last Move&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myMove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkmate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6d343137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/cat flag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wrong move&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once again carefully looking at the source code, we can see a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct&lt;/code&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moves_t&lt;/code&gt; with four members; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;king&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queen&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pawn&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkmate&lt;/code&gt; defined.&lt;/p&gt;

&lt;p&gt;Inside the main function it sets and defines several variables;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userid&lt;/code&gt; (don’t remember why, looks like user access control)&lt;/li&gt;
  &lt;li&gt;struct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moves_t&lt;/code&gt; pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myMove&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;size (of size of struct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moves_t&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;struct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moves_t&lt;/code&gt; pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;play&lt;/code&gt; (allocated with memory of size variable)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we have a printf statement that will print the string, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Let play a game of chess&lt;/code&gt; then strats a never ending while loop.&lt;/p&gt;

&lt;p&gt;Insides our while loop we have one printf statement that will print the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Make your move : &lt;/code&gt;, then wait for our input of size 16 is copied to the struct pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;play&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We then have four if statements that each compare our struct member to specific hex data.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If we pass the first if statement, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free&lt;/code&gt; operation will be performed on our struct pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myMove&lt;/code&gt; and the program will print the string, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nice move. I can&apos;t catchup.&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If we pass the second if statement our struct pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myMove&lt;/code&gt; will be allocated data, then the struct member &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkmate&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myMove&lt;/code&gt; will be the same as for what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;play&lt;/code&gt; pointer holds and the program will print the string, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;King placed in order&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If we pass the third if statement, we end up in the last if statement.&lt;/li&gt;
  &lt;li&gt;If we pass the last if statement, the program runs a system command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/cat&lt;/code&gt; against file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; that will output its content.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-after-free&quot;&gt;Use After Free&lt;/h2&gt;

&lt;p&gt;Our main goal is to pass the last if statement to get the flag. To better understand how to reach our goal we need to understand how &lt;a href=&quot;https://owasp.org/www-community/vulnerabilities/Using_freed_memory&quot;&gt;Use After Free&lt;/a&gt; works.&lt;/p&gt;

&lt;p&gt;In C, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; function will allocate memory on the heap and return a pointer to the address of the allocated memory. Then there is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free()&lt;/code&gt; function that will deallocate the address of the memory allocation presented by the pointer returned from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc()&lt;/code&gt;. When a block of memory is freed the memory stored at that space remains there until modified or overwritten.&lt;/p&gt;

&lt;p&gt;This becomes a bug/vulnerability when the pointer of the deallocated memory address is still being used again after being freed.&lt;/p&gt;

&lt;h2 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h2&gt;

&lt;p class=&quot;note&quot;&gt;This section is going to include screenshots that I think will better describe the bug.&lt;/p&gt;

&lt;p&gt;I came to realize while debugging the program under GDB, is that the hex values are not just random but they are actual ASCII strings 🤦🏾‍♂️. Didn’t think of trying to decode them with &lt;a href=&quot;https://gchq.github.io/CyberChef/&quot;&gt;CyberChef&lt;/a&gt; - The Cyber Swiss Army Knife by GCHQ.&lt;/p&gt;

&lt;p&gt;Lets proceed and inspect our two struct pointers in the heap with GDB to better understand how to solve the challenge.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2022-08-14/image2.png&quot; alt=&quot;image2&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;partial main function program in assembly&lt;/p&gt;

&lt;p&gt;At the variable definations section, we can see right after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; being called the address to the allocated memory which is stored at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; being moved to a DWORD (4 bytes) pointer at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x14&lt;/code&gt; (which is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;play&lt;/code&gt; pointer struct).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2022-08-14/image3.png&quot; alt=&quot;image3&quot; class=&quot;align-right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To confirm this if we proceed inside our infinite loop, we can see right before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fgets&lt;/code&gt; being called three variables being pushed to the stack; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdin&lt;/code&gt; address that was moved to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebx+0x38&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt; that was moved to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edx&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp+0x10&lt;/code&gt; and our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;play&lt;/code&gt; pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x14&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Which we can see are the arguments being passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fgets&lt;/code&gt;.&lt;/p&gt;

&lt;p style=&quot;padding-top: 2em&quot;&gt;When we set our break point right after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fgets&lt;/code&gt; can see our input pointer address to the heap at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebp-0x14&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2022-08-14/image4.png&quot; alt=&quot;image4&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Verifying our input pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;play&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We are going to proceed an inspect the the second pointer after malloc and then after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myMove-&amp;gt;checkmate = play-&amp;gt;checkmate being&lt;/code&gt; executed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2022-08-14/image5.png&quot; alt=&quot;image5&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;First two if statements in assembly&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2022-08-14/image6.png&quot; alt=&quot;image6&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;After malloc invocation, heap inspection&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2022-08-14/image7.png&quot; alt=&quot;image7&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;After &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myMove-&amp;gt;checkmate = play-&amp;gt;checkmate&lt;/code&gt; invocation, heap inspection&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# File: &apos;sol.py&apos;
#!/usr/bin/env python3
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
Creates an exploit
AH CTF19 pwn; iamfree
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromhex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                                                                                                                                                                                                                              
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;KING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;0x4e455721 0x4b494e47 0x4141413f 0x6d343137&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FREE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;0x46524545 0x71756565 0x6e333e3a&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PAWN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;0x75733334 0x66743352 0x66523333&apos;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;KING: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;FREE: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;PAWN: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PAWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# solution 1; KING then PAWN
# solution 2; KING, FREE then PAWN
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p style=&quot;padding-top: 1em&quot;&gt;&lt;img src=&quot;/assets/img/blog/2022-08-14/image8.png&quot; alt=&quot;image8&quot; class=&quot;align-left&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;padding-top: 2em&quot;&gt;While debugging the program under GDB, I came to realize that program has two solutions.&lt;/p&gt;

&lt;p&gt;Where there is the expected solution which was more like a UAF. While the unexpected solution is that you don’t really need to invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free&lt;/code&gt; because from our inspection after invoking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; we can see that the pointer already contains the data required to pass the last if statement.&lt;/p&gt;

&lt;p&gt;That being said even when you call free the data will still be there and the pointer can still be used to pass the last if statement.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I learnt afew things when playing around with this program and I do hope you have too. Would like to thank the creator &lt;a href=&quot;https://twitter.com/icrackthecode&quot;&gt;@icrackthecode&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;6Point6 &lt;a href=&quot;https://6point6.co.uk/insights/common-software-vulnerabilities-part-ii-explaining-the-use-after-free/&quot;&gt;Common Software Vulnerabilities, PartII: Explaining the Use After Free&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Orange Cyberdefense &lt;a href=&quot;https://sensepost.com/blog/2017/linux-heap-exploitation-intro-series-used-and-abused-use-after-free/&quot;&gt;Linux Heap Exploitation Intro Series: Used and Abused - Use After Free&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;LiveOverflow &lt;a href=&quot;https://www.youtube.com/watch?v=ZHghwsTRyzQ&quot;&gt;The Heap: How do use-after-free exploits work?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;CryptoCat &lt;a href=&quot;https://www.youtube.com/watch?v=YGQAvJ__12k&quot;&gt;Exploiting a Use-After-Free (UAF) Vulnerability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Marcus Hutchins &lt;a href=&quot;https://www.youtube.com/watch?v=PKqMsaKGdlM&quot;&gt;Introduction to Use-After-Free Vulnerabilities (Part: 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>th3gr00t</name></author><category term="ctf" /><category term="re" /><category term="pwn" /><summary type="html">I was second-guessing myself on releasing this post because I felt like it was too simple in general. But this is my log, we still have to log it despite its simplicity.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2022-08-14/image1.png" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2022-08-14/image1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Task Interpreter Puzzle</title><link href="http://localhost:4000/blog/notes/2022-06-21-puzzle/" rel="alternate" type="text/html" title="Task Interpreter Puzzle" /><published>2022-06-21T00:00:00+03:00</published><updated>2022-06-21T00:00:00+03:00</updated><id>http://localhost:4000/blog/notes/puzzle</id><content type="html" xml:base="http://localhost:4000/blog/notes/2022-06-21-puzzle/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot; id=&quot;markdown-toc-intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-code&quot; id=&quot;markdown-toc-the-code&quot;&gt;The Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-puzzle&quot; id=&quot;markdown-toc-the-puzzle&quot;&gt;The Puzzle&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#instruction-functions&quot; id=&quot;markdown-toc-instruction-functions&quot;&gt;Instruction functions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bytecode-data&quot; id=&quot;markdown-toc-bytecode-data&quot;&gt;Bytecode data&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#thought-process&quot; id=&quot;markdown-toc-thought-process&quot;&gt;Thought process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#solving&quot; id=&quot;markdown-toc-solving&quot;&gt;Solving&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;It was around lunch hour when I received a ping from a good friend and colleague of mine. He sent me a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task_interpreter.py&lt;/code&gt; file and asked me if I could solve the challenge. I managed to have a look at it but it seemed a bit tough honestly, wrote some comments on the file and decided to shelf it to my long to-do list.&lt;/p&gt;

&lt;p&gt;On Friday while at work, my colleague (he is also a good friend of mine 😂) asked me if I had taken a look at the challenge. We sat down with him and I explained to him what I had understood about the challenge and in the process, I got a better understanding of the challenge. That evening I decided to have a look at the challenge and two days later I was able to solve the challenge and call it a success.&lt;/p&gt;

&lt;p&gt;This post will describe my thought process when solving the challenge and what I would conclude as the teaching lesson.&lt;/p&gt;

&lt;h2 class=&quot;text-align-center&quot; id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# file: &quot;task_interpreter.py&quot;
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hashlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;binascii&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hexlify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unhexlify&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Crypto.PublicKey&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSA&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;STACK_MAX_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PROGRAM_MAX_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op_nop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op_push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;B&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op_dup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op_verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Verify failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op_check_sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;pub_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;big&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;129&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;big&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;big&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;big&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;pub_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RsaKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;OPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_nop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;#2: op_add,
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;#3: op_sub,
&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;#4: op_not,
&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_dup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;mh&quot;&gt;0x0c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_check_sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# 0x0d: op_halt
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Wrong opcode &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK_MAX_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Stack size exceeds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROGRAM_MAX_SIZE&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROGRAM_MAX_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x08&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01\x20\x9f\x86\xd0\x81\x88\x4c\x7d\x65\x9a\x2f\xea\xa0\xc5\x5a\xd0\x15\xa3\xbf\x4f\x1b\x2b\x0b\x82\x2c\xd1\x5d\x6c\x15\xb0\xf0\x0a\x08&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x07&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x09&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01\x83\xb8\x1d\x31\x39\x5e\xd5\xf6\xb7\x14\xac\x1e\x12\xaa\x4a\x72\xca\x24\x7f\xce\x87\x8a\xe6\xf9\x04\x25\xb1\x82\x35\xff\x99\xb1\xf0\x9f\x98\xd3\xfb\xdb\x6d\xeb\x0b\x35\x6f\x63\x51\x67\x44\x8c\x66\x66\xb9\x5c\x44\xb5\x3a\x81\x5b\xce\xbf\xeb\xb2\x2a\x34\x71\xd1\x94\x85\xad\xca\x7f\x30\x37\x7d\xb5\x56\x46\x78\x4c\xe8\xa7\x6f\x43\xcf\x0a\x2d\x32\x13\x76\x5d\x10\xe1\x9f\xe3\xc5\x19\x74\xe9\x69\xe1\xfa\x5b\x71\x4c\x9d\x9c\x0c\x35\xcf\xe8\x53\x2d\x12\xa6\x23\x1e\xd4\x9c\x59\xd3\xab\x81\xa2\x36\x50\x18\x55\xdf\x35\xd1\x01\x00\x01&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0c&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unhexlify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Enter the script to solve the puzzle: &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Great job!&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Try again :(&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code contains nine functions; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_nop&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_push&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_dup&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_equal&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_hash&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_verify&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_check_sig&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;solve&lt;/code&gt;. It also contains one list, one dictionary, and four variables; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPS&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK_MAX_SIZE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROGRAM_MAX_SIZE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unlock&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;At a glance when looking at the first nine instructions they work like VM instructions. The process function works as described and the solve function checks if we have solved the puzzle.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPS&lt;/code&gt; dictionary contains keys that act as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_codes&lt;/code&gt; and the values which are our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instructions&lt;/code&gt; functions. Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock&lt;/code&gt; variables already contain data that we will later analyze.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROGRAM_MAX_SIZE&lt;/code&gt; is equal to 2048 and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK_MAX_SIZE&lt;/code&gt; is equal to 128.&lt;/p&gt;

&lt;h2 id=&quot;the-puzzle&quot;&gt;The Puzzle&lt;/h2&gt;

&lt;p&gt;The program requires us to input some data in hex which is going to be converted back from hex to binary data (bytes). Our input is then stored in a variable called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unlock&lt;/code&gt; which is then passed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;solve&lt;/code&gt; function in an if statement. If the return value from our solve function is true, it prints &lt;strong&gt;Great job!&lt;/strong&gt; and if it’s false it prints &lt;strong&gt;Try again :(&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The solve function takes two variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unlock&lt;/code&gt;. It first checks the length of both variables and if any of them are greater than the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROGRAM_MAX_SIZE&lt;/code&gt; it will return a false. If the lengths are within bounds it calls the process function twice when passing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unlock&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock&lt;/code&gt; variables respectively. Then proceeds to check if the first element in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt; is equal to byte &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x01&lt;/code&gt; it returns true and if it’s not equal it returns false.&lt;/p&gt;

&lt;p&gt;The process function takes in one variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt;. First initializes program counter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pc&lt;/code&gt; to zero which is the length of our byte code. Then proceeds to a while loop that checks if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pc&lt;/code&gt; is less than the length of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt;. Inside the while loop, it initializes the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt; which checks the first byte in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; and maps it with the key value in our OPS dictionary. If the key value isn’t present it raises an error printing &lt;strong&gt;Wrong opcode [value]&lt;/strong&gt;. The next line of code is the one that prevents the while loop from being an infinite loop. Once the key value has been found and data has been passed to our specified instruction function, the specified instruction returns a value either the length of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; or zero which is then incremented by one so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pc&lt;/code&gt; to be greater than the length of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt;. Afterward, it checks if the data in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt; is greater than the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK_MAX_SIZE&lt;/code&gt; and if it is it raised an error printing &lt;strong&gt;Stack size exceeds&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;instruction-functions&quot;&gt;Instruction functions&lt;/h3&gt;

&lt;p&gt;Each instruction function performs a task using either the input data &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; or the data in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt;. I won’t explain the finer details of each line in the function but only the important bits and pieces.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_push&lt;/code&gt;; adds data to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt; and returns the length of the input data.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_dup&lt;/code&gt;; duplicates the last element in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt; and returns zero.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_equal&lt;/code&gt;; pops the last two elements in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt; and checks if they are equal. Where it appends byte &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x01&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x00&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt; if they are equal or not equal respectively. It also returns zero.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_hash&lt;/code&gt;; pops the last element in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt; and appended its sha256 digest (hash value) to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt;. It also returns zero.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_verify&lt;/code&gt;; pops the last element in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt; and checks if it is equal to byte &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x00&lt;/code&gt; it raises an error printing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Verify failed&lt;/code&gt;. It also returns zero.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_check_sig&lt;/code&gt;; pops the last three elements in the stack and points them to variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pub_key&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sig&lt;/code&gt; respectively. Then proceeds to prepare the data to perform an &lt;a href=&quot;https://cryptobook.nakov.com/digital-signatures/rsa-sign-verify-examples&quot;&gt;RSA verify signature algorithm&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;bytecode-data&quot;&gt;Bytecode data&lt;/h3&gt;

&lt;p&gt;I figured out the bytecode data format by looking at the lock data. This will be important for solving the challenge because we need to understand how the process takes in data to solve the challenge. The first byte data is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_code&lt;/code&gt; and the second-byte data is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data_len&lt;/code&gt; length of the data following it. The length is mainly required when pushing the data to the stack.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2022-06-21/image2.png&quot; alt=&quot;image2&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;bytecode data format&lt;/p&gt;

&lt;h2 id=&quot;thought-process&quot;&gt;Thought process&lt;/h2&gt;

&lt;p&gt;I noticed that our input data is being processed first then the lock data. That being the case I worked with what I had the lock data.&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x08&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01\x20\x9f\x86\xd0\x81\x88\x4c\x7d\x65\x9a\x2f\xea\xa0\xc5\x5a\xd0\x15\xa3\xbf\x4f\x1b\x2b\x0b\x82\x2c\xd1\x5d\x6c\x15\xb0\xf0\x0a\x08&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# msg_hash
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x07&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x09&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01\x83\xb8\x1d\x31\x39\x5e\xd5\xf6\xb7\x14\xac\x1e\x12\xaa\x4a\x72\xca\x24\x7f\xce\x87\x8a\xe6\xf9\x04\x25\xb1\x82\x35\xff\x99\xb1\xf0\x9f\x98\xd3\xfb\xdb\x6d\xeb\x0b\x35\x6f\x63\x51\x67\x44\x8c\x66\x66\xb9\x5c\x44\xb5\x3a\x81\x5b\xce\xbf\xeb\xb2\x2a\x34\x71\xd1\x94\x85\xad\xca\x7f\x30\x37\x7d\xb5\x56\x46\x78\x4c\xe8\xa7\x6f\x43\xcf\x0a\x2d\x32\x13\x76\x5d\x10\xe1\x9f\xe3\xc5\x19\x74\xe9\x69\xe1\xfa\x5b\x71\x4c\x9d\x9c\x0c\x35\xcf\xe8\x53\x2d\x12\xa6\x23\x1e\xd4\x9c\x59\xd3\xab\x81\xa2\x36\x50\x18\x55\xdf\x35\xd1\x01\x00\x01&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#pub_key
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x0c&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Starts by calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_hash&lt;/code&gt; instruction which will hash the last element in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Pushes some data of length 32 to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_equal&lt;/code&gt; instruction which will compare the last two elements in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_verify&lt;/code&gt; instruction which will verify if the last two elements were equal.&lt;/li&gt;
  &lt;li&gt;Pushes some data of length 131 to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Then proceeds to call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_check_sig&lt;/code&gt; instruction.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From the lock data I verified two things, one is that the first data being pushed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt; is a sha256 hash digest because the first instruction hashes some data that will be in the stack then later on checking if they are equal to each other and verifying that they were equal. Two is that the last data being pushed before calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_check_sig&lt;/code&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pub_key&lt;/code&gt;. When the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_check_sig&lt;/code&gt; is called you could see that the last element is set to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pub_key&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;I will be honest at first I thought this was a hash collision attack kind of challenge but after reviewing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_check_sig&lt;/code&gt; instruction noticed that it wasn’t. Because I have never done any cryptography kind of challenge I went ahead and checked for CTF writeups that involved RSA to learn about it and read also about RSA in the book Serious Cryptography by Jean-Phillipe Aumasson.&lt;/p&gt;

&lt;p&gt;Learned a few things when trying to figure out if that instruction was vulnerable and ended up having a quick chat with a friend on discord who was able to crack the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg_hash&lt;/code&gt; using the &lt;a href=&quot;https://crackstation.net/&quot;&gt;crack station&lt;/a&gt; site. My friend also informed me that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_check_sig&lt;/code&gt; instruction was not vulnerable to textbook RSA signature attacks because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; was not vulnerable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2022-06-21/image3.png&quot; alt=&quot;image3&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;I don’t understand how I forgot to try and crack the hash.&lt;/p&gt;

&lt;p&gt;I thought I had hit a dead-end because for us to solve this puzzle we are required to have a byte &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x01&lt;/code&gt; at the beginning of the stack which I thought we would have got by passing the verify signature algorithm being performed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_check_sig&lt;/code&gt; instruction.&lt;/p&gt;

&lt;h2 id=&quot;solving&quot;&gt;Solving&lt;/h2&gt;

&lt;p&gt;As I was heading to work on Tuesday I got a light bulb moment, we have control of what we place in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt; what if we could find a way to place the byte &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x01&lt;/code&gt; at the beginning of the stack and despite whatever is appended after the last instruction we will still have our byte present.&lt;/p&gt;

&lt;p&gt;To attain this I first noted what data will be popped from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt; by each instruction so that the byte should be present at the end. Because now we have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg&lt;/code&gt; it means we can pass the verification being performed in steps 3 and 4.&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# file: &quot;solve.py&quot;
#!/usr/bin/env python3
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
Solve task interpreter puzzle challenge
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hashlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;binascii&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hexlify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unhexlify&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STACK_MAX_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PROGRAM_MAX_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op_push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# finds length of unpacked code...
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;B&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op_dup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;op_verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opcode processing error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Verify failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;OPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_dup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Wrong opcode &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK_MAX_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Stack size exceeds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01\x04\x74\x65\x73\x74&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x01\x01\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x06&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x07&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x06&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexlify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Most of the logic in my script is borrowed from the puzzle. I first specified two variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sig&lt;/code&gt; where the message is the value cracked from our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg_hash&lt;/code&gt; and signature is a null byte &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x00&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_sig&lt;/code&gt; instruction is called it will pop three values from the stack. These two variables were our missing pieces.&lt;/p&gt;

&lt;p&gt;My unlock data do the following;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Push message &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_dup&lt;/code&gt; instruction which will duplicate our message.&lt;/li&gt;
  &lt;li&gt;Call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_equal&lt;/code&gt; instruction which will manage to produce the byte &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x01&lt;/code&gt; and place it as the first element in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Push signature to the stack which will be popped by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_check_sig&lt;/code&gt; instruction.&lt;/li&gt;
  &lt;li&gt;Push message to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STACK&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op_dup&lt;/code&gt; instruction which will duplicate our message where the last message will be hashed by lock data for it to pass the verification.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2022-06-21/image4.png&quot; alt=&quot;image4&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was an interesting puzzle to solve. This was an interview question and I think the main idea was to test the interviewee on source code review.&lt;/p&gt;

&lt;p&gt;If you find any other way of solving the challenge by passing the verify RSA signature algorithm please feel free to share would love to learn from you.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;CTF Wiki by Mahaloz &lt;a href=&quot;https://ctf-wiki.mahaloz.re/crypto/asymmetric/rsa/rsa_theory/&quot;&gt;RSA Theory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.sigmaprime.io/introduction-to-rsa.html&quot;&gt;A Detailed Introduction to RSA Cryptography&lt;/a&gt; by Kristian Mcdonald.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cryptobook.nakov.com/digital-signatures/rsa-signatures&quot;&gt;RSA Signatures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cryptobook.nakov.com/digital-signatures/rsa-sign-verify-examples&quot;&gt;RSA: Sign / Verify&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://comp38411.jtang.dev/docs/public-key-cryptography/breaking-textbook-rsa-signatures/&quot;&gt;Breaking Textbook RSA Signatures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.learnpythonwithrune.org/birthday-paradox-and-hash-function-collisions-by-example/&quot;&gt;Birthday Paradox and Hash Function Collisions by Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bwall/HashPump&quot;&gt;HashPump&lt;/a&gt;; a tool to exploit hash length extension attack.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Ganapati/RsaCtfTool&quot;&gt;RsaCtfTool&lt;/a&gt; RSA attack tool (mainly for CTFs).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cryptohack.org/&quot;&gt;CryptoHack&lt;/a&gt;, for learning modern cryptography.&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://cryptopals.com/&quot;&gt;Cryptopals&lt;/a&gt; crypto challenges.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>th3gr00t</name></author><category term="notes" /><category term="re" /><category term="Puzzle" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2022-06-21/image1.png" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2022-06-21/image1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">GTA III; Money &amp;amp; Health Hacked</title><link href="http://localhost:4000/blog/notes/2022-05-30-GTA3-Money-Health-Hack/" rel="alternate" type="text/html" title="GTA III; Money &amp;amp; Health Hacked" /><published>2022-05-30T00:00:00+03:00</published><updated>2022-05-30T00:00:00+03:00</updated><id>http://localhost:4000/blog/notes/GTA3-Money-Health-Hack</id><content type="html" xml:base="http://localhost:4000/blog/notes/2022-05-30-GTA3-Money-Health-Hack/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot; id=&quot;markdown-toc-intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dxwnd-to-the-rescue&quot; id=&quot;markdown-toc-dxwnd-to-the-rescue&quot;&gt;DxWnd to the Rescue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#money-hack&quot; id=&quot;markdown-toc-money-hack&quot;&gt;Money Hack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#health-hack&quot; id=&quot;markdown-toc-health-hack&quot;&gt;Health Hack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#epilogue&quot; id=&quot;markdown-toc-epilogue&quot;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;This post will introduce a whole series of a game I found either last year or during covid on my friend’s laptop. I did play this game while I was young, and I would love to take this opportunity to bring back the nostalgic feeling I had when completing missions but this time while hacking it as I learn and enjoy myself.&lt;/p&gt;

&lt;p&gt;I was motivated by &lt;a href=&quot;https://twitter.com/GuidedHacking&quot;&gt;Guided Hacking&lt;/a&gt;, from the amazing &lt;a href=&quot;https://www.youtube.com/playlist?list=PLt9cUwGw6CYFSoQHsf9b12kHWLdgYRhmQ&quot;&gt;series&lt;/a&gt; on game hacking, and &lt;a href=&quot;https://www.youtube.com/c/LiveOverflow&quot;&gt;Live0verflow&lt;/a&gt; with some epic content on Minecraft hacking.&lt;/p&gt;

&lt;p&gt;My main goal for this series is to Hack while I enjoy myself and maybe learn how to bypass anti-cheats. I won’t go into the details or the steps to reproduce what I have been doing. Mainly explain the technical details that I found difficult or confusing, particularly for this game, while creating a cheat engine table.&lt;/p&gt;

&lt;h2 id=&quot;dxwnd-to-the-rescue&quot;&gt;DxWnd to the Rescue&lt;/h2&gt;

&lt;p&gt;I needed a way to make the game run in windowed mode because it wasn’t possible, as we can tell game developers in the year 2001 never included it.&lt;/p&gt;

&lt;p&gt;After some research, I came by a software application from &lt;a href=&quot;https://sourceforge.net/&quot;&gt;SourceForge&lt;/a&gt; known as &lt;a href=&quot;https://sourceforge.net/projects/dxwnd/&quot;&gt;DxWnd&lt;/a&gt;, a window hooker that runs fullscreen programs in a window. I found a &lt;a href=&quot;https://sourceforge.net/p/dxwnd/discussion/general/thread/c360cbc28e/&quot;&gt;thread&lt;/a&gt; that contained a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dxw&lt;/code&gt;` config file which worked after some minor edits; despite that, it took me a whole day.&lt;/p&gt;

&lt;h2 id=&quot;money-hack&quot;&gt;Money Hack&lt;/h2&gt;

&lt;p&gt;I got two static addresses for the money value, which was easy getting it. Watch Guided Hacking &lt;a href=&quot;https://www.youtube.com/playlist?list=PLt9cUwGw6CYFSoQHsf9b12kHWLdgYRhmQ&quot;&gt;series&lt;/a&gt; episode 1.&lt;/p&gt;

&lt;h2 id=&quot;health-hack&quot;&gt;Health Hack&lt;/h2&gt;

&lt;p&gt;Getting the health address took a toll on me. I scanned for 4bytes exact value while the value type was float. I found the address and thought I was done, but the addresses never worked when I closed off the game and started it again. I researched and found an &lt;a href=&quot;https://youtu.be/fvv8IJGke1Q&quot;&gt;old video&lt;/a&gt; by Guided Hacking where he showed how to solve this issue using the &lt;a href=&quot;https://assault.cubers.net/&quot;&gt;AssultCube&lt;/a&gt; game.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2022-05-30/image2.png&quot; alt=&quot;image2&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Instructions that write to the Health Address&lt;/p&gt;

&lt;p&gt;The image above shows the instructions that write to the health address. The first instruction loads the floating-point value, and then the second instruction subtracts the value at the address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ESP+3C&lt;/code&gt;], then the remainder is at the same address it was loaded from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[EBP+2C0]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Following the &lt;a href=&quot;https://youtu.be/fvv8IJGke1Q&quot;&gt;old video&lt;/a&gt; with this information, I obtained several static addresses and confirmed the correct one that was the actual Player Object Pointer. I then took the offset we found from the instructions writing to the health address and found my actual health address that never changes even when spawning the game later on.&lt;/p&gt;

&lt;p&gt;Below is a screen recording of the actual footage of my upcoming cheat table at work.&lt;/p&gt;

&lt;div class=&quot;youtube-wrapper&quot; style=&quot;padding-top: 2em&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/W5596Egy0B4&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;Now that we have obtained the Player Object Pointer, it opens up endless hacking opportunities. Thank you for your time, and see you in the other realm.&lt;/p&gt;

&lt;p&gt;Remember, it can be done; all that is required is some bit of practice and consistency.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;LiveOverflow series on &lt;a href=&quot;https://www.youtube.com/watch?v=Ekcseve-mOg&amp;amp;list=PLhixgUqwRTjwvBI-hmbZ2rpkAl4lutnJG&quot;&gt;hacking Minecraft&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Guided Hacking &lt;a href=&quot;https://www.youtube.com/watch?v=tiiQBPgSQBI&amp;amp;list=PLt9cUwGw6CYFSoQHsf9b12kHWLdgYRhmQ&quot;&gt;game hacking&lt;/a&gt; series.&lt;/li&gt;
  &lt;li&gt;Guided Hacking &lt;a href=&quot;https://guidedhacking.com/&quot;&gt;website&lt;/a&gt; that contains other resources on game hacking.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>th3gr00t</name></author><category term="notes" /><category term="gamehacking" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2022-05-30/image1.png" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2022-05-30/image1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Bye Blogger, Hello Jekyll</title><link href="http://localhost:4000/blog/notes/2022-05-25-the-move/" rel="alternate" type="text/html" title="Bye Blogger, Hello Jekyll" /><published>2022-05-25T00:00:00+03:00</published><updated>2022-05-25T00:00:00+03:00</updated><id>http://localhost:4000/blog/notes/the-move</id><content type="html" xml:base="http://localhost:4000/blog/notes/2022-05-25-the-move/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot; id=&quot;markdown-toc-intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-move&quot; id=&quot;markdown-toc-the-move&quot;&gt;The move&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#epilogue&quot; id=&quot;markdown-toc-epilogue&quot;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Greetings 👋🏾, I hope it is not too late to wish everyone a happy new year 😅.&lt;/p&gt;

&lt;p&gt;Last year when I was beginning ALX, a software engineering program, I envisioned myself creating a whole CMS for my portfolio and blog. My goal was if I got to enjoy building web applications, I would enjoy doing web security. A new strategy for learning web security is required because I never enjoyed programming web applications. I dropped out of the program (due to personal reasons), but I am doing their C and python programming modules.&lt;/p&gt;

&lt;p&gt;Early this year, my friend and a mentor made a move on his blog, and I decided to do the same. After researching various Jekyll themes, I opted to buy the &lt;a href=&quot;https://hydejack.com/&quot;&gt;Hydejack Pro&lt;/a&gt; theme.&lt;/p&gt;

&lt;h2 id=&quot;the-move&quot;&gt;The move&lt;/h2&gt;

&lt;p&gt;Jekyll has a &lt;a href=&quot;https://import.jekyllrb.com/docs/blogger/&quot;&gt;resource&lt;/a&gt; on how one can import my posts from Blogger. The ruby gem &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-import&lt;/code&gt; converts the Blogger XML file into a set of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; files. But that is half of what was required, and after research, I found a &lt;a href=&quot;https://www.sevarg.net/2021/07/04/moving-from-blogger-to-jekyll/&quot;&gt;post&lt;/a&gt; by Russell Graves where he did some automation bit on his move from Blogger to Jekyll. I used some of his scripts with some minor tweaks and managed to get the markdown files. I still had to re-write the posts and create new images; it was tiresome, but I managed.&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;As the headline of the blog states, I am on a particular journey, and I plan to use this platform to share and rant about everything I learn.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sevarg.net/2021/07/04/moving-from-blogger-to-jekyll/&quot;&gt;Moving from Blogger to Jekyll&lt;/a&gt; by Russell Graves.&lt;/li&gt;
  &lt;li&gt;Russell’s collection of &lt;a href=&quot;https://github.com/Syonyk/blogger_to_jekyll&quot;&gt;scripts&lt;/a&gt; to help migrate from Blogger to Jekyll.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lazyren.github.io/devlog/how-i-customized-hydejack-theme.html&quot;&gt;How I customized Hydejack Theme&lt;/a&gt; by DaeIn Lee.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lazyren.github.io/devlog/hydejack-post-writing-tips-tricks.html&quot;&gt;Hydejack Post Writing Tips &amp;amp; Tricks&lt;/a&gt; by DaeIn Lee.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>th3gr00t</name></author><category term="notes" /><category term="Blog" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2022-05-25/image1.png" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2022-05-25/image1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Security + DevOp’s Play Ground Automation Setup</title><link href="http://localhost:4000/blog/dev/2020-03-13-security-devops-play-ground-automation/" rel="alternate" type="text/html" title="Security + DevOp’s Play Ground Automation Setup" /><published>2020-03-13T00:00:00+03:00</published><updated>2020-03-13T00:00:00+03:00</updated><id>http://localhost:4000/blog/dev/security-devops-play-ground-automation</id><content type="html" xml:base="http://localhost:4000/blog/dev/2020-03-13-security-devops-play-ground-automation/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prologue&quot; id=&quot;markdown-toc-prologue&quot;&gt;Prologue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#playground-gadgets&quot; id=&quot;markdown-toc-playground-gadgets&quot;&gt;Playground gadgets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why-shell-script-&quot; id=&quot;markdown-toc-why-shell-script-&quot;&gt;Why shell script ??&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dotfiles&quot; id=&quot;markdown-toc-dotfiles&quot;&gt;Dotfiles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup-scripts&quot; id=&quot;markdown-toc-setup-scripts&quot;&gt;Setup Scripts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#secrets-how-do-you-handle-them&quot; id=&quot;markdown-toc-secrets-how-do-you-handle-them&quot;&gt;Secrets🙊, how do you handle them?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ssh-keys&quot; id=&quot;markdown-toc-ssh-keys&quot;&gt;SSH Keys&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#epilogue&quot; id=&quot;markdown-toc-epilogue&quot;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sols&quot; id=&quot;markdown-toc-sols&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Problem statement;&lt;/code&gt;&lt;/strong&gt; I used to use a virtual environment as my playground to break and tinker around with stuff, then I got a new laptop, and I had to set up the whole environment from zero to my virtual environment state. I did it the first time manually, and when I was done setting up everything, I found out that the new laptop’s hard disk was faulty 🤬. I had to replace the hard disk and re-do the setup again.&lt;/p&gt;

&lt;p&gt;It was tiresome, and it took me a whole week because each time I was faced with a problem, I had to fix, format the disk, reinstall the OS, and re-do the setup.&lt;/p&gt;

&lt;p&gt;I got tired of that cycle, and I decided to google around for a solution. I came by a &lt;a href=&quot;https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/&quot;&gt;post&lt;/a&gt; by &lt;a href=&quot;https://victoria.dev/&quot;&gt;Victoria Drake&lt;/a&gt;, which made me realize that I can automate my setup process and simplify my life.&lt;/p&gt;

&lt;p&gt;I want to start by noting down my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playground gadgets&lt;/code&gt; and then explain why I decided to use the bash shell script and not the other fancy stuff (like Vagrant, puppet, chef, or ansible).&lt;/p&gt;

&lt;h2 id=&quot;playground-gadgets&quot;&gt;Playground gadgets&lt;/h2&gt;

&lt;p&gt;I have four major gadgets that I use on a typical day, which are;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tmux&lt;/code&gt; - handles all my terminal sessions and screens.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vim&lt;/code&gt; - this is my Integrated Development Environment.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Keepass2&lt;/code&gt; - holds all my SSH keys and stores some of my passwords.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash&lt;/code&gt; - preferred shell; this is where I call home. (I defaulted to using bash instead of ZSH)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;why-shell-script-&quot;&gt;Why shell script ??&lt;/h2&gt;

&lt;p&gt;I decided to use shell script because it will allow me to understand the language better and fine-tune my coding skills. Plus, it comes by default in most Unix systems. While with the other fancy tools, I would be forced to install and maybe configure.&lt;/p&gt;

&lt;h2 id=&quot;dotfiles&quot;&gt;Dotfiles&lt;/h2&gt;

&lt;p&gt;Most of the gadgets mentioned above have configuration files that are called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotfiles&lt;/code&gt;. I won’t explain each dotfile; check out Victoria’s &lt;a href=&quot;https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/&quot;&gt;post&lt;/a&gt; she has done most of the explanation, but I will try my best not to skip the most important bits.&lt;/p&gt;

&lt;p&gt;The dotfiles structure; I decided to place all my dotfiles in one directory, then each config in its directory with its name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-03-13/image1.png&quot; alt=&quot;image1&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;dotfiles: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotfiles structure&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The image above represents how I have arranged my config files. Before you ask why? Let me mention that I am a neat freak (kind of). My mind is as organized as a shelf, so that’s why!! Now you can judge me, but it works for me!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bash&lt;/code&gt; folder, I have two aliases, one containing the regular aliases and the other containing aliases with secrets, tokens, and IPs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim&lt;/code&gt; folder contains the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YouCompleteMe&lt;/code&gt; vim plugin config I stole from &lt;a href=&quot;https://jonasdevlieghere.com/a-better-youcompleteme-config/&quot;&gt;Jonas Devlieghere&lt;/a&gt; and the vim config file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eddie&lt;/code&gt; folder contains a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetings.txt&lt;/code&gt; file which contains lines I would like the &lt;a href=&quot;https://github.com/victoriadrake/eddie-terminal&quot;&gt;eddie-terminal&lt;/a&gt; to tell me each time I spawn my terminal. Awesome right!! The project is by the one and only &lt;a href=&quot;https://victoria.dev/&quot;&gt;Victoria Drake&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last folder was for Oh-My-ZSH, which I currently don’t use in my setup. But it contained various files that were from the bash folder but for the Oh-My-ZSH shell.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setup-scripts&quot;&gt;Setup Scripts&lt;/h2&gt;

&lt;p&gt;For the setup scripts, I will explain the significant bits. And for the rest, you can check out the whole &lt;a href=&quot;https://github.com/iAmG-r00t/desktop-setup&quot;&gt;project repo&lt;/a&gt; on my &lt;a href=&quot;https://github.com/iAmG-r00t&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;dotfiles.sh&lt;/strong&gt; setups all my dotfiles. Plus, it does more, so you should have a look at it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;desktop.sh&lt;/strong&gt; setups up my folders and desktop environment look and feel, including setting up a screensaver, background image, user profile icon, and favorite apps on my dock (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kindly read Victoria Drake&apos;s post, she explained how to do it&lt;/code&gt;). I want to mention that some settings like renaming the trash on the desktop don’t work in Ubuntu 19 but work with ubuntu 18. You can play around with it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;software.sh&lt;/strong&gt; installs all the packages I use daily and the dependencies required to install all the applications.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;setup.sh&lt;/strong&gt; brings all the scripts together. Everything is executed from here, plus it does some cleanup, installs vim and tmux plugins, &lt;del&gt;changes my default shell from bash to zsh&lt;/del&gt;, and then logs out the desktop for some settings to take effect.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sync.sh&lt;/strong&gt; syncs all my dotfiles from the home user directory to the local Github repository so that I can update the remote repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;secrets-how-do-you-handle-them&quot;&gt;Secrets🙊, how do you handle them?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The fun part;&lt;/em&gt;&lt;/strong&gt; In Victoria’s &lt;a href=&quot;https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/&quot;&gt;post&lt;/a&gt;, she pointed out there were some files that one wouldn’t put on a public repo as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;best security practice&lt;/code&gt;. That was a problem for me because I wanted to back up everything while sharing what was required. Github doesn’t allow one to set some directories in a repository as private, so I had to think of a solution to my problem.&lt;/p&gt;

&lt;p&gt;Later on, I found a few &lt;a href=&quot;#sols&quot;&gt;solutions&lt;/a&gt; to achieve this. I decided to stick with &lt;a href=&quot;https://git-secret.io/&quot;&gt;git-secret&lt;/a&gt;, which was among the solutions. It uses GPG RSA key pair to encrypt all of your desired secret files and allows you to push them to a public repository, which you can later decrypt in your local environment using the same GPG key.&lt;/p&gt;

&lt;h2 id=&quot;ssh-keys&quot;&gt;SSH Keys&lt;/h2&gt;

&lt;p&gt;I am paranoid while at the same time lazy. I required a way to log in to my servers efficiently the same way I log in to my online accounts using &lt;a href=&quot;https://www.lastpass.com/&quot;&gt;LastPass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is a way of doing this &lt;a href=&quot;https://devopsheaven.com/ssh/security/lastpass/devops/2018/06/13/ssh-lastpass-cli.html&quot;&gt;using LastPass&lt;/a&gt;, but there was an issue where I love to separate my work and social life (&lt;strong&gt;&lt;em&gt;I do have two separate machines for this …&lt;/em&gt;&lt;/strong&gt;). I needed a way to store all the passwords I use during work separately from my mere Gmail and other personal/social account passwords. &lt;/p&gt;

&lt;p&gt;Later on, I found &lt;a href=&quot;https://keepass.info/index.html&quot;&gt;KeePass&lt;/a&gt;, which I had heard about when working at Safaricom PLC. I never knew it had great perks.&lt;/p&gt;

&lt;p&gt;It allows you to store SSH keys and has a plugin known as &lt;a href=&quot;https://keeagent.readthedocs.io/en/stable/&quot;&gt;KeeAgent&lt;/a&gt;, which acts as an &lt;a href=&quot;https://www.ssh.com/ssh/agent&quot;&gt;ssh-agent&lt;/a&gt;. It enables you to log in to your servers when the KeePass database file is open without prompting for the ssh-key passphrase.&lt;/p&gt;

&lt;p&gt;KeePass has a lot of plugins that do a variety of things, so I decided to look for a way to backup my passwords somewhere, and that’s when I found &lt;a href=&quot;https://bitbucket.org/devinmartin/keecloud/wiki/Home&quot;&gt;KeeCloud&lt;/a&gt;. It allows you to store a backup in Dropbox and sync the local file with the dropbox file using triggers or manually using the KeePass Synchronize option.&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;All that being said and done, I need to mention that I will be updating this setup process as time goes by, so if you are reading this blog now or later, check out my Github repository for any updates.&lt;/p&gt;

&lt;p&gt;Now let me showcase my work before I end this post. I hope the demo gods will spare me today.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/cM0sOz8r2idXdf2E4arL0bhFM&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/cM0sOz8r2idXdf2E4arL0bhFM.svg&quot; alt=&quot;asciicast&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It backups well, I will be using a default install of ubuntu 18 running in a virtual environment. Enjoy!!&lt;/p&gt;

&lt;div class=&quot;youtube-wrapper&quot; style=&quot;padding-top: 2em&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/oNDbW7nxqBM&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p style=&quot;padding-top: 2em&quot;&gt;Before I end this post, sorry for the shaky video recording, I was using my phone; next time, I will look for better solutions for such situations. Anyways thank you for your time.&lt;/p&gt;

&lt;p class=&quot;note&quot; title=&quot;UPDATE&quot;&gt;In 2020 quarter three, during the covid period, I reconstructed the whole project into single modules. In January 2021, when I was creating some challenges for the &lt;a href=&quot;https://ciphercode.dev/&quot;&gt;Aspire CTF&lt;/a&gt;, I deleted my whole 2020 projects directory that I hadn’t backed up to GitHub (Backups are important, BTW). Hence this project will be redone.&lt;/p&gt;

&lt;h2 id=&quot;sols&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/an-introduction-to-managing-secrets-safely-with-version-control-systems&quot;&gt;An Introduction to Managing Secrets Safely with Version Control Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://umanovskis.se/blog/post/dotfiles/&quot;&gt;Managing dotfiles with Git and Encryption&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.guru99.com/devops-tools.html&quot;&gt;Thirty DevOps Tools and Technologies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coderwall.com/p/qzzfrw/encrypt-password-files-and-sensitive-info-in-your-git-repo&quot;&gt;Encrypt password files and sensitive info in your git repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/maxvt/bb49a6c7243163b8120625fc8ae3f3cd&quot;&gt;Infra-secret-management-overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@GeorgiosGoniotakis/how-to-keep-your-repositorys-sensitive-data-secure-using-git-secret-c1ddc28cb985&quot;&gt;How to keep your password repository’s sensitive data secure using git-secret&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://julien.coubronne.net/en/2016/07/14/password-management-cross-platform-and-in-the-cloud/&quot;&gt;Password management, cross-platform and in the cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/devinmartin/keecloud/issues/19/dropbox-setup-for-dummies&quot;&gt;Dropbox setup for dummies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.arj.no/2017/01/03/nautilus-bookmarks/&quot;&gt;Remove standard bookmarks in Nautilus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iAmG-r00t/desktop-setup&quot;&gt;Project repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>th3gr00t</name></author><category term="dev" /><category term="Automation" /><category term="Bash" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2020-03-13/image1.gif" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2020-03-13/image1.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Out Of The Rabbit Hole Adventures: AppSec in the flesh</title><link href="http://localhost:4000/blog/ctf/2020-02-24-out-of-rabbit-hole-adventures-appsec-in/" rel="alternate" type="text/html" title="Out Of The Rabbit Hole Adventures: AppSec in the flesh" /><published>2020-02-24T00:00:00+03:00</published><updated>2020-02-24T00:00:00+03:00</updated><id>http://localhost:4000/blog/ctf/out-of-rabbit-hole-adventures-appsec-in</id><content type="html" xml:base="http://localhost:4000/blog/ctf/2020-02-24-out-of-rabbit-hole-adventures-appsec-in/">&lt;p class=&quot;note&quot; title=&quot;APOLOGY&quot;&gt;Apologoies for any rough images, they were migrated from blogger.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prologue&quot; id=&quot;markdown-toc-prologue&quot;&gt;Prologue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#recon&quot; id=&quot;markdown-toc-recon&quot;&gt;Recon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#challenges&quot; id=&quot;markdown-toc-challenges&quot;&gt;Challenges&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-1-manifestation&quot; id=&quot;markdown-toc-challenge-1-manifestation&quot;&gt;Challenge 1: Manifestation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-2-registration-payment-bypass&quot; id=&quot;markdown-toc-challenge-2-registration-payment-bypass&quot;&gt;Challenge 2: Registration Payment Bypass&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-3-spoiler-sqlpwnedanswer-is-entry-point&quot; id=&quot;markdown-toc-challenge-3-spoiler-sqlpwnedanswer-is-entry-point&quot;&gt;Challenge 3: Spoiler! SQLPwned(Answer is entry point)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-4-prove-yourself-exploit&quot; id=&quot;markdown-toc-challenge-4-prove-yourself-exploit&quot;&gt;Challenge 4: Prove Yourself, Exploit!&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-5-lets-catthehash&quot; id=&quot;markdown-toc-challenge-5-lets-catthehash&quot;&gt;Challenge 5: Let’s catthehash&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-6-our-sms-gateway-pwned&quot; id=&quot;markdown-toc-challenge-6-our-sms-gateway-pwned&quot;&gt;Challenge 6: Our SMS Gateway Pwned??&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#epilogue&quot; id=&quot;markdown-toc-epilogue&quot;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;

&lt;p&gt;Hi, 👋 happy new year 🎉.  In my previous &lt;a href=&quot;/blog/scripts/2019-04-17-rabbit-hole-adventures-appsec-teaser/&quot;&gt;post&lt;/a&gt;, I talked about the lessons I learned while learning to find bugs in a mobile application.&lt;/p&gt;

&lt;p&gt;So I decided to write this blog post and bring the adventure to an end.&lt;/p&gt;

&lt;p&gt;Last year I attended AfricaHackon. Despite not participating in the CTF contest as a player, I did try to solve the challenges, but this time I took more interest in the Mobile Apps, RE, and pwn challenges.&lt;/p&gt;

&lt;p&gt;This post will focus on the mobile application and its challenges.&lt;/p&gt;

&lt;p&gt;The players were provided an APK file. When I got hold of the APK file, I installed it on my test device, a Homepesa Sacco application with a login and register account when spawned.&lt;/p&gt;

&lt;p&gt;There were six challenges, so before starting to solve the challenges, I decided to do some recon to understand the application.&lt;/p&gt;

&lt;h2 id=&quot;recon&quot;&gt;Recon&lt;/h2&gt;

&lt;p&gt;Below are the steps I usually follow to get to understand the application;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Decompile the application&lt;/strong&gt; (one can use apktool or change the filename extension from dot apk to dot zip, then unzip it using any archive utility, e.g., 7zip, WinRAR, e.t.c …); this allowed me to view the source code of the app.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Read the manifest file&lt;/strong&gt; to identify application-defined permissions, look for any misconfigurations set, locate exported activities or services, and identify broadcast receivers and content providers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Used &lt;a href=&quot;https://labs.f-secure.com/tools/drozer/&quot;&gt;drozer&lt;/a&gt;&lt;/strong&gt; to identify any attack surface present and look for files that are being stored locally in the application directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;/h2&gt;

&lt;p&gt;Afterward, I decided to look at the challenges and focus on what is required, getting the flags. There were six challenges; I will explain how I was able to attain the flag for each challenge.&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;challenge-1-manifestation&quot;&gt;Challenge 1: Manifestation&lt;/h3&gt;

&lt;p&gt;From the challenge title, it seemed like we were to look at the manifest file, but I never spotted it during my recon process. After consulting with the creator, he said the flag was a comment in the manifest file. One couldn’t attain the flag for this challenge because it wasn’t there. The application comments placed in the manifest file were removed when he compiled the source code.&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;challenge-2-registration-payment-bypass&quot;&gt;Challenge 2: Registration Payment Bypass&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image2.png&quot; alt=&quot;image2)&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenge description&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the second challenge, I went ahead with registering an account, and during the last step of registration, one was required to make a registration payment. When reviewing the code, I saw the flag right there hardcoded in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Home&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image3.png&quot; alt=&quot;image3&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hardcoded flag&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Most of the players went ahead and submitted this flag, but for me, I wasn’t satisfied. This wasn’t the proper way of attaining the flag. So I went ahead and reviewed the code. A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitwise&lt;/code&gt; database file was created when the &lt;strong&gt;onCreate&lt;/strong&gt; method was called, and data was placed in the database during the account creation process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image4.png&quot; alt=&quot;image4&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate method&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Alert statement was triggered after checking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitwise&lt;/code&gt; database if the account status was active or not active, and if an account is active, it’s when we are presented with our flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image5.png&quot; alt=&quot;image5&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data being placed on database&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image6.png&quot; alt=&quot;image6&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alert Statement&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That being the logic, I went ahead and installed an SQLite DB editor android application, picked the application database &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitwise&lt;/code&gt; went to the user’s table where I changed the default value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; of column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acstatus&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p class=&quot;text-align-center&quot;&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image7.png&quot; alt=&quot;image7&quot; /&gt;
&lt;img src=&quot;/assets/img/blog/2020-02-24/image8.png&quot; alt=&quot;image8&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitwise DB in SQLite DB Editor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When spawning the application again I was present with the alert Response message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image9.png&quot; alt=&quot;image9&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alert message with flag.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag2;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P4ym3n7Bypa$$&lt;/code&gt;&lt;/p&gt;

&lt;p class=&quot;note&quot; title=&quot;UPDATE&quot;&gt;Remembering this challenge, there was an issue with payment verification while registering.&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;challenge-3-spoiler-sqlpwnedanswer-is-entry-point&quot;&gt;Challenge 3: Spoiler! SQLPwned(Answer is entry point)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image10.png&quot; alt=&quot;image10&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenge description&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This was a very interesting challenge. I learned a new attack vector before the event was about to end. The challenge had zero solves, so we were given a clue, try to log in with a correct email address but a wrong password. I did that, and I was presented with an alert box saying that I had entered the wrong password, prompting me if I wanted to recover the password. So I proceeded and placed my email on the recover password page and was sent a recovery link in the email address I provided.&lt;/p&gt;

&lt;p&gt;Opening the email address in the browser, I was presented with a page where I was to set a new password to reset it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image11.png&quot; alt=&quot;image11&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Recover Password Page&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Looking at the URL link; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://159.203.60.168/recoverypassmy.php?id=9408&lt;/code&gt; seems like we can test for SQL injection. I proceeded to test, and my tool of choice was &lt;a href=&quot;https://github.com/sqlmapproject/sqlmap&quot;&gt;sqlmap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Command: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlmap -u URL -b&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image12.png&quot; alt=&quot;image12&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SQL Map&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Boom, we have an SQL injection present, and we have our entry point &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recoverpassmy.php&lt;/code&gt;&lt;/strong&gt;, our flag.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag3;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recoverpassmy.php&lt;/code&gt;&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;challenge-4-prove-yourself-exploit&quot;&gt;Challenge 4: Prove Yourself, Exploit!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image13.png&quot; alt=&quot;image13&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall4: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenge description&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the next challenge, I used the SQL injection to enumerate the tables in the database, then found an admin table, dumped its contents, and found the md5hash for the admin.&lt;/p&gt;

&lt;p&gt;Command for enumerating DB tables: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlmap -u URL --tables&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image14.png&quot; alt=&quot;image14&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall4: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerated tables&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Command for dumping table contents: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlmap -u URL --dump -D homepesa -T admin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image15.png&quot; alt=&quot;image15&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall4: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Admin table contents&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag4;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e64b78fc3bc91bcbc7dc232ba8ec59e0&lt;/code&gt;&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;challenge-5-lets-catthehash&quot;&gt;Challenge 5: Let’s catthehash&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image16.png&quot; alt=&quot;image16&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall5: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenge description&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will be short. Md5 hash isn’t the best encryption. The best thing about sqlmap is that it’s capable of decrypting/cracking hashes with either a custom (which you feed it) or default wordlist. But there are also other ways of decrypting md5 hashes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image17.png&quot; alt=&quot;image17&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall5: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlmap brute-forcing md5 hash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag5;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Admin123&lt;/code&gt;&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;challenge-6-our-sms-gateway-pwned&quot;&gt;Challenge 6: Our SMS Gateway Pwned??&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image18.png&quot; alt=&quot;image18&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall6: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenge description&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Obtaining the flag for the last challenge was tough. I stared at the code for a while, and the way I found the flag was more on checking each class involved in sending SMS.&lt;/p&gt;

&lt;p&gt;I would love to point out that the way I solved this challenge was not the proper way from the creator’s point of view. He mentioned that one had to intercept or do a man-in-the-middle attack on the SMS request to solve the challenge. For me, I found the flag hardcoded in the code.&lt;/p&gt;

&lt;p&gt;The issue being SMS gateway owned, SMS-gateway qual to an API, this being my theory I looked at various classes starting from the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MobilesasaClient&lt;/code&gt;&lt;/strong&gt; class where it has a field for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag 3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image19.png&quot; alt=&quot;image19&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall6: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MobilesasaClient Class&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When I saw this, I knew that I was close. So I decided to look at the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySMSBroadcastReceiver&lt;/code&gt;&lt;/strong&gt; class, where there was nothing interesting. But after sitting down and looking at the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MobilesasaClient&lt;/code&gt;&lt;/strong&gt; class, I noticed a small detail I had missed &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendSMS&lt;/code&gt;&lt;/strong&gt;. I used that to query for any other string containing the exact string and found the flag in the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfirmPhone&lt;/code&gt;&lt;/strong&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image20.png&quot; alt=&quot;image20&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall6: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfirmPhone class with flag&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag6:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N37w0rk@n@lysisM0bileS@s@&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As we can note, the flag states we should have done a network analysis to solve the challenge. Next time I will have that in mind.&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;I enjoyed solving the challenges where I got the opportunity to learn something new. I would love to thank the creator &lt;a href=&quot;https://twitter.com/shellcode254&quot;&gt;@shellcode254&lt;/a&gt; and the &lt;a href=&quot;https://twitter.com/AfricaHackon&quot;&gt;@AfricaHackon&lt;/a&gt; team.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The following will get you started, Enjoy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nelenkov.blogspot.com/&quot;&gt;Android Explorations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nixawk/pentest-wiki/tree/master/2.Vulnerability-Assessment/Android-Assessment&quot;&gt;Android Hacking and Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tanprathan/MobileApp-Pentest-Cheatsheet&quot;&gt;Mobile App Pentest Cheatsheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ashishb/android-security-awesome&quot;&gt;Awesome Android Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/B3nac/Android-Reports-and-Resources&quot;&gt;Android Reports and Resources&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tthtlc.wordpress.com/2011/09/01/static-analysis-of-android-applications/&quot;&gt;Static Analysis of android applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/papers/26620&quot;&gt;Mobile Application Hacking Diary Ep.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/papers/44145&quot;&gt;Mobile Application Hacking Diary Ep.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mulliner.org/android/&quot;&gt;Android Stuff and Security Research&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xtiankisutsa/awesome-mobile-CTF&quot;&gt;Mobile App CTFs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://androidtamer.com/learn_android_security&quot;&gt;Learn Android Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://android.jlelse.eu/hacking-android-app-with-frida-a85516f4f8b7&quot;&gt;Hacking Android Apps with Frida&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerone.com/blog/androidhackingmonth-intro-to-android-hacking&quot;&gt;Introduction to Android Hacking by @0XTEKNOGEEK&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mobile-security.gitbook.io/mobile-security-testing-guide/&quot;&gt;Mobile Security Testing Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hacker101.com/sessions/mobile_crash_course.html&quot;&gt;Mobile Hacking Crash Course&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/s0md3v/status/1150845512838332416&quot;&gt;Somedev’s Way&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/fs0c131y/status/1129680329994907648&quot;&gt;Elliot Alderson Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>th3gr00t</name></author><category term="ctf" /><category term="re" /><category term="appsec" /><summary type="html">Apologoies for any rough images, they were migrated from blogger.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2020-02-24/image1.gif" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2020-02-24/image1.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rabbit Hole Adventures: AppSec Teaser</title><link href="http://localhost:4000/blog/notes/2019-04-17-rabbit-hole-adventures-appsec-teaser/" rel="alternate" type="text/html" title="Rabbit Hole Adventures: AppSec Teaser" /><published>2019-04-17T00:00:00+03:00</published><updated>2019-04-17T00:00:00+03:00</updated><id>http://localhost:4000/blog/notes/rabbit-hole-adventures-appsec-teaser</id><content type="html" xml:base="http://localhost:4000/blog/notes/2019-04-17-rabbit-hole-adventures-appsec-teaser/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prologue&quot; id=&quot;markdown-toc-prologue&quot;&gt;Prologue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lessons&quot; id=&quot;markdown-toc-lessons&quot;&gt;Lessons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#epilogue&quot; id=&quot;markdown-toc-epilogue&quot;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;

&lt;p class=&quot;note&quot; title=&quot;Warning&quot;&gt;This is just a teaser and the adventure will be short, but I do hope you will join me on this journey.&lt;/p&gt;

&lt;p&gt;Mobile applications, while we use them every day I had one main goal to learn how to identify vulnerabilities. Heads to google chrome, and enter text; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tools for mobile security&lt;/code&gt; into the search bar. Well, that was the wrong way of starting it but it got me somewhere.&lt;/p&gt;

&lt;p&gt;While learning how to review a mobile application if you are in my shoes right now reading this blog looking for a tool to do so out of the box, just stop right there ⛔⛔⛔.&lt;/p&gt;

&lt;p&gt;In this blog post, I am going to give four lessons that I learned and will be using in my everyday engagements.&lt;/p&gt;

&lt;h2 id=&quot;lessons&quot;&gt;Lessons&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Lesson 1;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set your goals&lt;/code&gt;; having a set of goals allows you to narrow your research and be precise about what you are looking for. (&lt;strong&gt;Example;&lt;/strong&gt; what kind of test do you want to conduct and why).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lesson 2;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cover the basics&lt;/code&gt;; you have to know what the application does, how it works and how the functions were implemented for them to work. (&lt;strong&gt;Example;&lt;/strong&gt; what is SSL pinning and how does it work).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lesson 3;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Take your time to read and understand&lt;/code&gt;; once you have learned and grasped a concept the road will be easy for you to practically give it a try. If you have got the time you can create a small application that is implementing SSL pinning or you can draw how SSL pinning works down on a sketchbook.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lesson 4;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Do it manually first&lt;/code&gt;; this is something my friends who have grasped unique techniques have iterated each time when we have a sit down with them, that before you go ahead and run a tool, first try doing it manually.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;Before I got to learn what application security is, I felt like I had a hammer and never knew where to start to look for holes to break. I got to learn this the hard way and I am proud that everything was a success, It was interesting and I will take this knowledge and finish a mobile application CTF series I have been sitting on, for a while now.&lt;/p&gt;

&lt;p&gt;This time I don’t have any resources to share but I would be happy if you would share any resources to keep me going on this journey, here is my Twitter handle &lt;a href=&quot;https://twitter.com/th3_gr00t&quot;&gt;@th3_gr00t&lt;/a&gt;.&lt;/p&gt;</content><author><name>th3gr00t</name></author><category term="notes" /><category term="appsec" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2019-04-17/image1.png" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2019-04-17/image1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">USIU-CTF-2019</title><link href="http://localhost:4000/blog/ctf/2019-03-13-usiu-ctf-2019/" rel="alternate" type="text/html" title="USIU-CTF-2019" /><published>2019-03-13T00:00:00+03:00</published><updated>2019-03-13T00:00:00+03:00</updated><id>http://localhost:4000/blog/ctf/usiu-ctf-2019</id><content type="html" xml:base="http://localhost:4000/blog/ctf/2019-03-13-usiu-ctf-2019/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prologue&quot; id=&quot;markdown-toc-prologue&quot;&gt;Prologue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#challenges&quot; id=&quot;markdown-toc-challenges&quot;&gt;Challenges&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#category-1-miscellaneous&quot; id=&quot;markdown-toc-category-1-miscellaneous&quot;&gt;Category 1 &lt;em&gt;Miscellaneous&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#category-2-general&quot; id=&quot;markdown-toc-category-2-general&quot;&gt;Category 2: &lt;em&gt;General&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#category-3-steganography&quot; id=&quot;markdown-toc-category-3-steganography&quot;&gt;Category 3: &lt;em&gt;Steganography&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;

&lt;p&gt;It’s a new year, and this year requires a different me. In this blog post, I will be showcasing the CTF challenges I created for the USIU hackathon event this year. It was an amazing experience, and due to time and other constraints, I never got the opportunity to create a lot of challenges. The ideas were there, trust me.&lt;/p&gt;

&lt;p&gt;Having graduated from USIU last year (&lt;a href=&quot;https://twitter.com/th3_gr00t/status/1046028164537954304&quot;&gt;this-is-me&lt;/a&gt;), I was contacted and allowed to create another challenge for the students in the information security class to tackle, and I accepted the challenge.&lt;/p&gt;

&lt;p&gt;This year I had to do things differently despite the time they had contacted me. It wasn’t easy because CTF creation isn’t a one, two, and three work. It requires a lot of time, google kung-fu, and foundation mastery. I also never had an idea of the number of people who were going to participate and their skill level, and that is why I decided to keep it simple as an introductory CTF.&lt;/p&gt;

&lt;p&gt;Resources used; Azure VM (yeah, I roll like that 😂😂😂😂), &lt;a href=&quot;https://ctfd.io/about/&quot;&gt;CTFd&lt;/a&gt; deployed in the VM, Ubuntu VM on my local machine for creating the challenges, CherryTree for taking notes, and well, my brain 😅😅😅😅&lt;/p&gt;

&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;/h2&gt;

&lt;p&gt;There were three categories of challenges;&lt;/p&gt;

&lt;h2 id=&quot;category-1-miscellaneous&quot;&gt;Category 1 &lt;em&gt;Miscellaneous&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;This category contained three challenges where the first challenge was more on basic foundations (&lt;em&gt;easy&lt;/em&gt;), the second challenge was on OSINT (&lt;em&gt;easy&lt;/em&gt;), and the third challenge was on cryptography (&lt;em&gt;medium&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&quot;category-2-general&quot;&gt;Category 2: &lt;em&gt;General&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;The second category also contained three challenges; where the first challenge contained a text file that had the flag inside it, and one was required to retrieve it (&lt;em&gt;easy&lt;/em&gt;). The second challenge was almost like the first challenge, but with a twist (&lt;em&gt;easy&lt;/em&gt;), there were two text files where one had the flag, and the third challenge was a zip file that was password protected with files where one had the password, and the other one contained the flag (&lt;em&gt;hard&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&quot;category-3-steganography&quot;&gt;Category 3: &lt;em&gt;Steganography&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;The last category contained two challenges where the first challenge was a gif photo (&lt;em&gt;easy&lt;/em&gt;) and the second challenge was a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.hc&lt;/code&gt; file that contained some nice little goodies inside (&lt;em&gt;medium&lt;/em&gt;).&lt;/p&gt;

&lt;p class=&quot;note&quot; title=&quot;Flag Format&quot;&gt;usiuctf{flag}&lt;/p&gt;

&lt;p class=&quot;text-align-center faded&quot;&gt;Below are images to showcase how the playground looked like, with the challenges.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2019-03-13/image2.png&quot; alt=&quot;image2&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;welcome page&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2019-03-13/image3.png&quot; alt=&quot;image3&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Challenges&lt;/p&gt;

&lt;p&gt;I want to congratulate the &lt;a href=&quot;https://twitter.com/AbdiHacks/status/1102219256517877760&quot;&gt;USIU team&lt;/a&gt; for winning the CTF. I will post the challenges on my GitHub with hints to solve them.&lt;/p&gt;

&lt;p class=&quot;note&quot; Title=&quot;Announcement&quot;&gt;Do try and solve the last challenge on steg. Some goodies are waiting for you.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://resources.infosecinstitute.com/tools-of-trade-and-resources-to-prepare-in-a-hacker-ctf-competition-or-challenge/&quot;&gt;CTF Preparation&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://th33gr00t.blogspot.com/2018/09/mfctfb.html&quot;&gt;2018 USIU CTF&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iAmG-r00t/CTF-Reports/tree/master/USIU-CTF-2019&quot;&gt;Challenges with Hints&lt;/a&gt; on GitHub.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>th3gr00t</name></author><category term="ctf" /><category term="create" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2019-03-13/image1.gif" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2019-03-13/image1.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">OSINT C.T.F: Learning it the Better Way</title><link href="http://localhost:4000/blog/ctf/2018-10-17-osint-ctf-learning-it-better-way/" rel="alternate" type="text/html" title="OSINT C.T.F: Learning it the Better Way" /><published>2018-10-17T00:00:00+03:00</published><updated>2018-10-17T00:00:00+03:00</updated><id>http://localhost:4000/blog/ctf/osint-ctf-learning-it-better-way</id><content type="html" xml:base="http://localhost:4000/blog/ctf/2018-10-17-osint-ctf-learning-it-better-way/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prologue&quot; id=&quot;markdown-toc-prologue&quot;&gt;Prologue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-challenge&quot; id=&quot;markdown-toc-the-challenge&quot;&gt;The Challenge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#epilogue&quot; id=&quot;markdown-toc-epilogue&quot;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O&lt;/code&gt;pen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S&lt;/code&gt;ource &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INT&lt;/code&gt;telligence, is a technique of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collecting data from publicly available sources to produce actionable intelligence&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While roaming the internet space, I came by a YT video titled; open-source intelligence, what I learned being an OSINT creeper by Josh Huff. After watching the video, I was excited and eager to learn more. I proceeded to give it a try, but after a few trials, I felt like I had no grip on the methodology presented by Josh.&lt;/p&gt;

&lt;div class=&quot;youtube-wrapper&quot; style=&quot;padding-top: 2em&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/6kBOCnOlwqI&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p style=&quot;padding-top: 2em&quot;&gt;Maybe I would find a CTF challenge on OSINT that I could solve, but there wasn’t any. Most of the challenges I found were by DEFCON, and they were on site but had taken recordings which I binged on them for a while. A few minutes later, I had a light bulb moment; why don’t I create my challenge. Ding!! Ding!! Ding!!&lt;/p&gt;

&lt;p&gt;Excitement and fear rushed through my veins. I went ahead to prepare a storyline and did some research to make the challenge solvable.&lt;/p&gt;

&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;The platform I decided to use for hosting the challenge was the Facebook C.T.F (F.B.C.T.F). It was quite easy to set up; however, if you have some other service using port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt;, I would advise you to either shut down the running service or change the Apache service port from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1234&lt;/code&gt; on the configuration file.&lt;/p&gt;

&lt;p&gt;The storyline creation process was quite a challenge because I had to use publicly accessible data to correlate and make a story out of them. The storyline I came up with was of a young boy who was an orphan, being moved from one orphanage to another with him, always seeking to find a place he could call home. Later on, he sought vengeance on a former colleague who used to be at his sanctuary place for destroying the home’s reputation.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;while re-writing this post, I noticed the storyline was vague, but it was what I had at that moment.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/iAmG-r00t/OSINT-CTF/blob/master/PWN3RS%20OSINT%20CTF%20GUIDE.pdf&quot;&gt;guide&lt;/a&gt; was provided to the players, where they were to follow a specific path from one country to the other while solving all seven levels.&lt;/p&gt;

&lt;p&gt;Apart from the guide, a methodology (borrowed from Josh Huff’s talk) and a link to the OSINT framework were provided.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Starting with the Known Data points.&lt;/li&gt;
  &lt;li&gt;Setting your Intelligence goals.&lt;/li&gt;
  &lt;li&gt;Gathering your tools.&lt;/li&gt;
  &lt;li&gt;Analyze how your data points are connected.&lt;/li&gt;
  &lt;li&gt;Pivoting, using new data points.&lt;/li&gt;
  &lt;li&gt;Repeat steps &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Validate if your target data is correct.&lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;text-align-center faded&quot;&gt;Below are images to showcase how the playground looked like, with the challenges.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-10-17/image2.png&quot; alt=&quot;image2&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;FBCTF Dashboard&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-10-17/image3.png&quot; alt=&quot;image3&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;FBCTF Task&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;It was an amazing experience. I got the opportunity to create something that allowed me to learn and share my knowledge. I am looking forward to doing more of this on different topics.&lt;/p&gt;

&lt;p&gt;The first player who completed the challenge was &lt;a href=&quot;https://twitter.com/AntonyMutiga&quot;&gt;Antony&lt;/a&gt; Mutiga](https://twitter.com/AntonyMutiga). His write-up is attached in the resources section (the funny thing is that he was my teammate at the AfricaHackOn CTF event 2018, a story for another day).&lt;/p&gt;

&lt;p&gt;I am happy to say this was a success, and I have provided all the configs of the challenge for anyone who wants to set it up.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;The OSINT framework is enough to guide you in solving the challenges. Give it a try.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://osintframework.com/&quot;&gt;OSINT Framework.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;What I learned by being an OSINT creeper &lt;a href=&quot;https://www.youtube.com/watch?v=6kBOCnOlwqI&quot;&gt;John Huff&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/fbctf&quot;&gt;FBCTF&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;FBCTF (&lt;a href=&quot;https://github.com/iAmG-r00t/OSINT-CTF&quot;&gt;Categories and Challenges&lt;/a&gt;) Export.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iAmG-r00t/OSINT-CTF&quot;&gt;Write-up&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/AntonyMutiga&quot;&gt;@AntonyMutiga&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>th3gr00t</name></author><category term="ctf" /><category term="create" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2018-10-17/image1.png" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2018-10-17/image1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">My SimpleBoot2Root CTF</title><link href="http://localhost:4000/blog/ctf/2018-09-11-mfctfb/" rel="alternate" type="text/html" title="My SimpleBoot2Root CTF" /><published>2018-09-11T00:00:00+03:00</published><updated>2018-09-11T00:00:00+03:00</updated><id>http://localhost:4000/blog/ctf/mfctfb</id><content type="html" xml:base="http://localhost:4000/blog/ctf/2018-09-11-mfctfb/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#background&quot; id=&quot;markdown-toc-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#capture-the-flag&quot; id=&quot;markdown-toc-capture-the-flag&quot;&gt;Capture The Flag&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#my-first-ctf-build&quot; id=&quot;markdown-toc-my-first-ctf-build&quot;&gt;My First CTF Build&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#assignment&quot; id=&quot;markdown-toc-assignment&quot;&gt;Assignment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I had a blog where I had posted posts on what a CTF is and a write-up of this CTF. The blog encountered some technical issues that led to creating a new one; due to my laziness, I will not do another whole write-up for this CTF. I want to explain what a CTF is and what led me to create this CTF and leave an assignment for you.&lt;/p&gt;

&lt;h2 id=&quot;capture-the-flag&quot;&gt;Capture The Flag&lt;/h2&gt;

&lt;p&gt;A Capture the Flag; &lt;strong&gt;CTF&lt;/strong&gt; is a kind of information security competition that enables someone interested in learning cyber security to build and polish up their skills. CTFs allowed me to learn how to hack and get into the cyber security field.&lt;/p&gt;

&lt;p&gt;Being a competition means there are various types of challenges from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web application&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverse engineering&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cryptography&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary exploitation&lt;/code&gt; (referred to as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwn&lt;/code&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forensics&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miscellaneous&lt;/code&gt; involved for the challenger to solve and win prizes.&lt;/p&gt;

&lt;div class=&quot;youtube-wrapper&quot; style=&quot;padding-top: 2em&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/8ev9ZX9J45A&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;my-first-ctf-build&quot;&gt;My First CTF Build&lt;/h2&gt;

&lt;p&gt;The third-year semester year 2017 was the first time I encountered a CTF challenge. I was a sucker for being spoon-fed most of the time, and it was rough, but I guess everyone’s first encounter is likely to be the same.&lt;/p&gt;

&lt;p&gt;I only had two classes to attend for a whole three-month period, and with all that free time, I got the opportunity to sharpen my wits. I started with &lt;a href=&quot;http://overthewire.org/wargames/&quot;&gt;OverTheWire Wargames&lt;/a&gt; Bandit, then went ahead to pwning several built virtual machines from &lt;a href=&quot;https://www.vulnhub.com/&quot;&gt;Vulnerable by Design: Vulnhub&lt;/a&gt;, and also participated in a few online CTF competitions.&lt;/p&gt;

&lt;p&gt;During the semester, there was an upcoming Hackathon event at the university, and I used to dislike such event’s because they focused on developers and neglected information security students. That being the case, I decided to chat with the organizers, who allowed me to create a simple Boot2Root challenge.&lt;/p&gt;

&lt;p&gt;The CTF I created was a vulnerable machine that I had solved and gained 100% root access. I enjoyed the struggle of solving it and tweaking it, and the challengers who participated in the event had a good time solving it too.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;The challenge contained clues that assisted the challenger in acquiring the next flag.&lt;/p&gt;

&lt;p&gt;I want to give credit to &lt;a href=&quot;https://twitter.com/@RobertWinkel&quot;&gt;Robert Winkel&lt;/a&gt;. It was his vulnerable machine challenge that got me started.&lt;/p&gt;

&lt;h2 id=&quot;assignment&quot;&gt;Assignment&lt;/h2&gt;

&lt;p&gt;I will leave you a challenge, solve the CTF, write an excellent write-up, and I will add it here on the resources links. You might never know where it will take you.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;The hacking methodology will be your guide. Don’t overthink, don’t be in a hurry, and the clues are there for a reason. &lt;a href=&quot;https://drive.google.com/open?id=1JeNyE5hTNon6FRE-n4QnqLnjZMCdBl8C&quot;&gt;LINK &lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;text-align-center faded&quot;&gt;I hope you enjoy the Challenge, and Feel free to contact me.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://resources.infosecinstitute.com/tools-of-trade-and-resources-to-prepare-in-a-hacker-ctf-competition-or-challenge/&quot;&gt;All in One Resource&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hackingarticles.in/capture-flag-challenges/&quot;&gt;Capture The Flag Challenges&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://captf.com/practice-ctf/&quot;&gt;Practice List&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/rfjV8XukxO8&quot;&gt;Play CTF, a great way to learn Hacking&lt;/a&gt; by Liveoverflow&lt;/li&gt;
&lt;/ol&gt;</content><author><name>th3gr00t</name></author><category term="ctf" /><category term="create" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2018-09-11/image1.png" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2018-09-11/image1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>