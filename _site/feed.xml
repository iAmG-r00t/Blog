<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-KE"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-KE" /><updated>2022-05-27T10:41:27+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">th3_gr00t</title><subtitle>One and only nerd who is on a journey to being a vulnerability researcher.
</subtitle><author><name>th3gr00t</name></author><entry><title type="html">Bye Blogger, Hello Jekyll</title><link href="http://localhost:4000/blog/scripts/2022-05-25-the-move/" rel="alternate" type="text/html" title="Bye Blogger, Hello Jekyll" /><published>2022-05-25T00:00:00+03:00</published><updated>2022-05-25T00:00:00+03:00</updated><id>http://localhost:4000/blog/scripts/the-move</id><content type="html" xml:base="http://localhost:4000/blog/scripts/2022-05-25-the-move/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot; id=&quot;markdown-toc-intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-move&quot; id=&quot;markdown-toc-the-move&quot;&gt;The move&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#epilogue&quot; id=&quot;markdown-toc-epilogue&quot;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Greetings üëãüèæ, I hope it is not too late to wish everyone a happy new year üòÖ.&lt;/p&gt;

&lt;p&gt;Last year when I was beginning ALX, a software engineering program, I envisioned myself creating a whole CMS for my portfolio and blog. My goal was if I got to enjoy building web applications, I would enjoy doing web security. A new strategy for learning web security is required because I never enjoyed programming web applications. I dropped out of the program (due to personal reasons), but I am doing their C and python programming modules.&lt;/p&gt;

&lt;p&gt;Early this year, my friend and a mentor made a move on his blog, and I decided to do the same. After researching various Jekyll themes, I opted to buy the &lt;a href=&quot;https://hydejack.com/&quot;&gt;Hydejack Pro&lt;/a&gt; theme.&lt;/p&gt;

&lt;h2 id=&quot;the-move&quot;&gt;The move&lt;/h2&gt;

&lt;p&gt;Jekyll has a &lt;a href=&quot;https://import.jekyllrb.com/docs/blogger/&quot;&gt;resource&lt;/a&gt; on how one can import my posts from Blogger. The ruby gem &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-import&lt;/code&gt; converts the Blogger XML file into a set of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; files. But that is half of what was required, and after research, I found a &lt;a href=&quot;https://www.sevarg.net/2021/07/04/moving-from-blogger-to-jekyll/&quot;&gt;post&lt;/a&gt; by Russell Graves where he did some automation bit on his move from Blogger to Jekyll. I used some of his scripts with some minor tweaks and managed to get the markdown files. I still had to re-write the posts and create new images; it was tiresome, but I managed.&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;As the headline of the blog states, I am on a particular journey, and I plan to use this platform to share and rant about everything I learn.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sevarg.net/2021/07/04/moving-from-blogger-to-jekyll/&quot;&gt;Moving from Blogger to Jekyll&lt;/a&gt; by Russell Graves.&lt;/li&gt;
  &lt;li&gt;Russell‚Äôs collection of &lt;a href=&quot;https://github.com/Syonyk/blogger_to_jekyll&quot;&gt;scripts&lt;/a&gt; to help migrate from Blogger to Jekyll.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lazyren.github.io/devlog/how-i-customized-hydejack-theme.html&quot;&gt;How I customized Hydejack Theme&lt;/a&gt; by DaeIn Lee.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lazyren.github.io/devlog/hydejack-post-writing-tips-tricks.html&quot;&gt;Hydejack Post Writing Tips &amp;amp; Tricks&lt;/a&gt; by DaeIn Lee.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>th3gr00t</name></author><category term="scripts" /><category term="Blog" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2022-05-25/image1.png" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2022-05-25/image1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Security + DevOp‚Äôs Play Ground Automation Setup</title><link href="http://localhost:4000/blog/dev/2020-03-13-security-devops-play-ground-automation/" rel="alternate" type="text/html" title="Security + DevOp‚Äôs Play Ground Automation Setup" /><published>2020-03-13T00:00:00+03:00</published><updated>2020-03-13T00:00:00+03:00</updated><id>http://localhost:4000/blog/dev/security-devops-play-ground-automation</id><content type="html" xml:base="http://localhost:4000/blog/dev/2020-03-13-security-devops-play-ground-automation/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prologue&quot; id=&quot;markdown-toc-prologue&quot;&gt;Prologue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#playground-gadgets&quot; id=&quot;markdown-toc-playground-gadgets&quot;&gt;Playground gadgets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#why-shell-script-&quot; id=&quot;markdown-toc-why-shell-script-&quot;&gt;Why shell script ??&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dotfiles&quot; id=&quot;markdown-toc-dotfiles&quot;&gt;Dotfiles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup-scripts&quot; id=&quot;markdown-toc-setup-scripts&quot;&gt;Setup Scripts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#secrets-how-do-you-handle-them&quot; id=&quot;markdown-toc-secrets-how-do-you-handle-them&quot;&gt;Secretsüôä, how do you handle them?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ssh-keys&quot; id=&quot;markdown-toc-ssh-keys&quot;&gt;SSH Keys&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#epilogue&quot; id=&quot;markdown-toc-epilogue&quot;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sols&quot; id=&quot;markdown-toc-sols&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Problem statement;&lt;/code&gt;&lt;/strong&gt; I used to use a virtual environment as my playground to break and tinker around with stuff, then I got a new laptop, and I had to set up the whole environment from zero to my virtual environment state. I did it the first time manually, and when I was done setting up everything, I found out that the new laptop‚Äôs hard disk was faulty ü§¨. I had to replace the hard disk and re-do the setup again.&lt;/p&gt;

&lt;p&gt;It was tiresome, and it took me a whole week because each time I was faced with a problem, I had to fix, format the disk, reinstall the OS, and re-do the setup.&lt;/p&gt;

&lt;p&gt;I got tired of that cycle, and I decided to google around for a solution. I came by a &lt;a href=&quot;https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/&quot;&gt;post&lt;/a&gt; by &lt;a href=&quot;https://victoria.dev/&quot;&gt;Victoria Drake&lt;/a&gt;, which made me realize that I can automate my setup process and simplify my life.&lt;/p&gt;

&lt;p&gt;I want to start by noting down my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playground gadgets&lt;/code&gt;¬†and then explain why I decided to use the bash shell script and not the other fancy stuff (like Vagrant, puppet, chef, or ansible).&lt;/p&gt;

&lt;h2 id=&quot;playground-gadgets&quot;&gt;Playground gadgets&lt;/h2&gt;

&lt;p&gt;I have four major gadgets that I use on a typical day, which are;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tmux&lt;/code&gt; - handles all my terminal sessions and screens.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vim&lt;/code&gt; - this is my Integrated Development Environment.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Keepass2&lt;/code&gt; - holds all my SSH keys and stores some of my passwords.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash&lt;/code&gt; - preferred shell; this is where I call home. (I defaulted to using bash instead of ZSH)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;why-shell-script-&quot;&gt;Why shell script ??&lt;/h2&gt;

&lt;p&gt;I decided to use shell script because it will allow me to understand the language better and fine-tune my coding skills. Plus, it comes by default in most Unix systems. While with the other fancy tools, I would be forced to install and maybe configure.&lt;/p&gt;

&lt;h2 id=&quot;dotfiles&quot;&gt;Dotfiles&lt;/h2&gt;

&lt;p&gt;Most of the gadgets mentioned above have configuration files that are called¬†&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotfiles&lt;/code&gt;. I won‚Äôt explain each dotfile; check out Victoria‚Äôs &lt;a href=&quot;https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/&quot;&gt;post&lt;/a&gt; she has done most of the explanation, but I will try my best not to skip the most important bits.&lt;/p&gt;

&lt;p&gt;The dotfiles structure; I decided to place all my dotfiles in one directory, then each config in its directory with its name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-03-13/image1.png&quot; alt=&quot;image1&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;dotfiles: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotfiles structure&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The image above represents how I have arranged my config files. Before you ask why? Let me mention that I am a neat freak (kind of). My mind is as organized as a shelf, so that‚Äôs why!! Now you can judge me, but it works for me!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bash&lt;/code&gt; folder, I have two aliases, one containing the regular aliases and the other containing aliases with secrets, tokens, and IPs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim&lt;/code&gt; folder contains the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YouCompleteMe&lt;/code&gt; vim plugin config I stole from &lt;a href=&quot;https://jonasdevlieghere.com/a-better-youcompleteme-config/&quot;&gt;Jonas Devlieghere&lt;/a&gt; and the vim config file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eddie&lt;/code&gt; folder contains a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetings.txt&lt;/code&gt; file which contains lines I would like the &lt;a href=&quot;https://github.com/victoriadrake/eddie-terminal&quot;&gt;eddie-terminal&lt;/a&gt; to tell me each time I spawn my terminal. Awesome right!! The project is by the one and only¬†&lt;a href=&quot;https://victoria.dev/&quot;&gt;Victoria Drake&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last folder was for Oh-My-ZSH, which I currently don‚Äôt use in my setup. But it contained various files that were from the bash folder but for the Oh-My-ZSH shell.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setup-scripts&quot;&gt;Setup Scripts&lt;/h2&gt;

&lt;p&gt;For the setup scripts, I will explain the significant bits. And for the rest, you can check out the whole &lt;a href=&quot;https://github.com/iAmG-r00t/desktop-setup&quot;&gt;project repo&lt;/a&gt;¬†on my &lt;a href=&quot;https://github.com/iAmG-r00t&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;dotfiles.sh&lt;/strong&gt;¬†setups all my dotfiles. Plus, it does more, so you should have a look at it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;desktop.sh&lt;/strong&gt;¬†setups up my folders and desktop environment look and feel, including setting up a screensaver, background image, user profile icon, and favorite apps on my dock (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kindly read Victoria Drake&apos;s post, she explained how to do it&lt;/code&gt;). I want to mention that some settings like renaming the trash on the desktop don‚Äôt work in Ubuntu 19 but work with ubuntu 18. You can play around with it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;software.sh&lt;/strong&gt;¬†installs all the packages I use daily and the dependencies required to install all the applications.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;setup.sh&lt;/strong&gt;¬†brings all the scripts together. Everything is executed from here, plus it does some cleanup, installs vim and tmux plugins, &lt;del&gt;changes my default shell from bash to zsh&lt;/del&gt;, and then logs out the desktop for some settings to take effect.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sync.sh&lt;/strong&gt; syncs all my dotfiles from the home user directory to the local Github repository¬†so that I can update the remote repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;secrets-how-do-you-handle-them&quot;&gt;Secretsüôä, how do you handle them?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The fun part;&lt;/em&gt;&lt;/strong&gt; In Victoria‚Äôs &lt;a href=&quot;https://victoria.dev/blog/how-to-set-up-a-fresh-ubuntu-desktop-using-only-dotfiles-and-bash-scripts/&quot;&gt;post&lt;/a&gt;, she pointed out there were some files that one wouldn‚Äôt put on a public repo as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;best security practice&lt;/code&gt;. That was a problem for me because I wanted to back up everything while sharing what was required. Github doesn‚Äôt allow one to set some directories in a repository as private, so I had to think of a solution to my problem.&lt;/p&gt;

&lt;p&gt;Later on, I found a few &lt;a href=&quot;#sols&quot;&gt;solutions&lt;/a&gt; to achieve this. I decided to stick with &lt;a href=&quot;https://git-secret.io/&quot;&gt;git-secret&lt;/a&gt;, which was among the solutions. It uses GPG RSA key pair to encrypt all of your desired secret files and allows you to push them to a public repository, which you can later decrypt in your local environment using the same GPG key.&lt;/p&gt;

&lt;h2 id=&quot;ssh-keys&quot;&gt;SSH Keys&lt;/h2&gt;

&lt;p&gt;I am paranoid while at the same time lazy. I required a way to log in to my servers efficiently the same way I log in to my online accounts using &lt;a href=&quot;https://www.lastpass.com/&quot;&gt;LastPass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is a way of doing this &lt;a href=&quot;https://devopsheaven.com/ssh/security/lastpass/devops/2018/06/13/ssh-lastpass-cli.html&quot;&gt;using LastPass&lt;/a&gt;, but there was an issue where I love to separate my work and social life (&lt;strong&gt;&lt;em&gt;I do have two separate machines for this ‚Ä¶&lt;/em&gt;&lt;/strong&gt;). I needed a way to store all the passwords I use during work separately from my mere Gmail and other personal/social account passwords.¬†&lt;/p&gt;

&lt;p&gt;Later on, I found &lt;a href=&quot;https://keepass.info/index.html&quot;&gt;KeePass&lt;/a&gt;, which I had heard about when working at Safaricom PLC. I never knew it had great perks.&lt;/p&gt;

&lt;p&gt;It allows you to store SSH keys and has a plugin known as &lt;a href=&quot;https://keeagent.readthedocs.io/en/stable/&quot;&gt;KeeAgent&lt;/a&gt;, which acts as an &lt;a href=&quot;https://www.ssh.com/ssh/agent&quot;&gt;ssh-agent&lt;/a&gt;. It enables you to log in to your servers when the KeePass database file is open¬†without prompting for the ssh-key passphrase.&lt;/p&gt;

&lt;p&gt;KeePass has a lot of plugins that do a variety of things, so I decided to look for a way to backup my passwords somewhere, and that‚Äôs when I found &lt;a href=&quot;https://bitbucket.org/devinmartin/keecloud/wiki/Home&quot;&gt;KeeCloud&lt;/a&gt;. It allows you to store a backup in Dropbox and sync the local file with the dropbox file using triggers or manually using the KeePass Synchronize option.&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;All that being said and done, I need to mention that I will be updating this setup process as time goes by, so if you are reading this blog now or later, check out my Github repository for any updates.&lt;/p&gt;

&lt;p&gt;Now let me showcase my work before I end this post. I hope the demo gods will spare me today.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/cM0sOz8r2idXdf2E4arL0bhFM&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/cM0sOz8r2idXdf2E4arL0bhFM.svg&quot; alt=&quot;asciicast&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It backups well, I will be using a default install of ubuntu 18 running in a virtual environment. Enjoy!!&lt;/p&gt;

&lt;div class=&quot;youtube-wrapper&quot; style=&quot;padding-top: 2em&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/oNDbW7nxqBM&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p style=&quot;padding-top: 2em&quot;&gt;Before I end this post, sorry for the shaky video recording, I was using my phone; next time, I will look for better solutions for such situations. Anyways thank you for your time.&lt;/p&gt;

&lt;p class=&quot;note&quot; title=&quot;UPDATE&quot;&gt;In 2020 quarter three, during the covid period, I reconstructed the whole project into single modules. In January 2021, when I was creating some challenges for the &lt;a href=&quot;https://ciphercode.dev/&quot;&gt;Aspire CTF&lt;/a&gt;, I deleted my whole 2020 projects directory that I hadn‚Äôt backed up to GitHub (Backups are important, BTW). Hence this project will be redone.&lt;/p&gt;

&lt;h2 id=&quot;sols&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/an-introduction-to-managing-secrets-safely-with-version-control-systems&quot;&gt;An Introduction to Managing Secrets Safely with Version Control Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://umanovskis.se/blog/post/dotfiles/&quot;&gt;Managing dotfiles with Git and Encryption&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.guru99.com/devops-tools.html&quot;&gt;Thirty DevOps Tools and Technologies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coderwall.com/p/qzzfrw/encrypt-password-files-and-sensitive-info-in-your-git-repo&quot;&gt;Encrypt password files and sensitive info in your git repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/maxvt/bb49a6c7243163b8120625fc8ae3f3cd&quot;&gt;Infra-secret-management-overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@GeorgiosGoniotakis/how-to-keep-your-repositorys-sensitive-data-secure-using-git-secret-c1ddc28cb985&quot;&gt;How to keep your password repository‚Äôs sensitive data secure using git-secret&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://julien.coubronne.net/en/2016/07/14/password-management-cross-platform-and-in-the-cloud/&quot;&gt;Password management, cross-platform and in the cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/devinmartin/keecloud/issues/19/dropbox-setup-for-dummies&quot;&gt;Dropbox setup for dummies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.arj.no/2017/01/03/nautilus-bookmarks/&quot;&gt;Remove standard bookmarks in Nautilus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iAmG-r00t/desktop-setup&quot;&gt;Project repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>th3gr00t</name></author><category term="dev" /><category term="Automation" /><category term="Bash" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2020-03-13/image1.gif" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2020-03-13/image1.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Out Of The Rabbit Hole Adventures: AppSec in the flesh</title><link href="http://localhost:4000/blog/ctf/2020-02-24-out-of-rabbit-hole-adventures-appsec-in/" rel="alternate" type="text/html" title="Out Of The Rabbit Hole Adventures: AppSec in the flesh" /><published>2020-02-24T00:00:00+03:00</published><updated>2020-02-24T00:00:00+03:00</updated><id>http://localhost:4000/blog/ctf/out-of-rabbit-hole-adventures-appsec-in</id><content type="html" xml:base="http://localhost:4000/blog/ctf/2020-02-24-out-of-rabbit-hole-adventures-appsec-in/">&lt;p class=&quot;note&quot; title=&quot;APOLOGY&quot;&gt;Aplogoies for any rough images, they were migrated from blogger.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prologue&quot; id=&quot;markdown-toc-prologue&quot;&gt;Prologue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#recon&quot; id=&quot;markdown-toc-recon&quot;&gt;Recon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#challenges&quot; id=&quot;markdown-toc-challenges&quot;&gt;Challenges&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-1-manifestation&quot; id=&quot;markdown-toc-challenge-1-manifestation&quot;&gt;Challenge 1: Manifestation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-2-registration-payment-bypass&quot; id=&quot;markdown-toc-challenge-2-registration-payment-bypass&quot;&gt;Challenge 2: Registration Payment Bypass&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-3-spoiler-sqlpwnedanswer-is-entry-point&quot; id=&quot;markdown-toc-challenge-3-spoiler-sqlpwnedanswer-is-entry-point&quot;&gt;Challenge 3: Spoiler! SQLPwned(Answer is entry point)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-4-prove-yourself-exploit&quot; id=&quot;markdown-toc-challenge-4-prove-yourself-exploit&quot;&gt;Challenge 4: Prove Yourself, Exploit!&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-5-lets-catthehash&quot; id=&quot;markdown-toc-challenge-5-lets-catthehash&quot;&gt;Challenge 5: Let‚Äôs catthehash&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#challenge-6-our-sms-gateway-pwned&quot; id=&quot;markdown-toc-challenge-6-our-sms-gateway-pwned&quot;&gt;Challenge 6: Our SMS Gateway Pwned??&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#epilogue&quot; id=&quot;markdown-toc-epilogue&quot;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;

&lt;p&gt;Hi, üëã happy new year üéâ.¬† In my previous &lt;a href=&quot;/blog/scripts/2019-04-17-rabbit-hole-adventures-appsec-teaser/&quot;&gt;post&lt;/a&gt;,¬†I talked about the lessons I learned while learning to find bugs in a mobile application.&lt;/p&gt;

&lt;p&gt;So I decided to write this blog post and bring the adventure to an end.&lt;/p&gt;

&lt;p&gt;Last year I attended AfricaHackon. Despite not participating in the CTF contest as a player, I did try to solve the challenges, but this time I took more interest in the Mobile Apps, RE, and pwn challenges.&lt;/p&gt;

&lt;p&gt;This post will focus on the mobile application and its challenges.&lt;/p&gt;

&lt;p&gt;The players were provided an APK file. When I got hold of the APK file, I installed it on my test device, a Homepesa Sacco application with a login and register account when spawned.&lt;/p&gt;

&lt;p&gt;There were six challenges, so before starting to solve the challenges, I decided to do some recon to understand the application.&lt;/p&gt;

&lt;h2 id=&quot;recon&quot;&gt;Recon&lt;/h2&gt;

&lt;p&gt;Below are the steps I usually follow to get to understand the application;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Decompile the application&lt;/strong&gt; (one can use apktool or change the filename extension from dot apk to dot zip, then unzip it using any archive utility, e.g., 7zip, WinRAR, e.t.c ‚Ä¶); this allowed me to view the source code of the app.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Read the manifest file&lt;/strong&gt; to identify application-defined permissions, look for any misconfigurations set, locate exported activities or services, and identify broadcast receivers and content providers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Used¬†&lt;a href=&quot;https://labs.f-secure.com/tools/drozer/&quot;&gt;drozer&lt;/a&gt;&lt;/strong&gt; to identify any attack surface present and look for files that are being stored locally in the application directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;/h2&gt;

&lt;p&gt;Afterward, I decided to look at the challenges and focus on what is required, getting the flags. There were six challenges; I will explain how I was able to attain the flag for each challenge.&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;challenge-1-manifestation&quot;&gt;Challenge 1: Manifestation&lt;/h3&gt;

&lt;p&gt;From the challenge title, it seemed like we were to look at the manifest file, but I never spotted it during my recon process. After consulting with the creator, he said the flag was a comment in the manifest file. One couldn‚Äôt attain the flag for this challenge because it wasn‚Äôt there. The application comments placed in the manifest file were removed when he compiled the source code.&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;challenge-2-registration-payment-bypass&quot;&gt;Challenge 2: Registration Payment Bypass&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image2.png&quot; alt=&quot;image2)&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenge description&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the second challenge, I went ahead with registering an account, and during the last step of registration, one was required to make a registration payment. When reviewing the code, I saw the flag right there hardcoded in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Home&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image3.png&quot; alt=&quot;image3&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hardcoded flag&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Most of the players went ahead and submitted this flag, but for me, I wasn‚Äôt satisfied. This wasn‚Äôt the proper way of attaining the flag. So I went ahead and reviewed the code. A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitwise&lt;/code&gt; database file was created when the &lt;strong&gt;onCreate&lt;/strong&gt; method was called, and data was placed in the database during the account creation process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image4.png&quot; alt=&quot;image4&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate method&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Alert statement was triggered after checking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitwise&lt;/code&gt; database if the account status was active or not active, and if an account is active, it‚Äôs when we are presented with our flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image5.png&quot; alt=&quot;image5&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data being placed on database&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image6.png&quot; alt=&quot;image6&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alert Statement&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That being the logic, I went ahead and installed an SQLite DB editor android application, picked the application database &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitwise&lt;/code&gt; went to the user‚Äôs table where I changed the default value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; of column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acstatus&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p class=&quot;text-align-center&quot;&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image7.png&quot; alt=&quot;image7&quot; /&gt;
&lt;img src=&quot;/assets/img/blog/2020-02-24/image8.png&quot; alt=&quot;image8&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitwise DB in SQLite DB Editor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When spawning the application again I was present with the alert Response message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image9.png&quot; alt=&quot;image9&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alert message with flag.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag2;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P4ym3n7Bypa$$&lt;/code&gt;&lt;/p&gt;

&lt;p class=&quot;note&quot; title=&quot;UPDATE&quot;&gt;Remembering this challenge, there was an issue with payment verification while registering.&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;challenge-3-spoiler-sqlpwnedanswer-is-entry-point&quot;&gt;Challenge 3: Spoiler! SQLPwned(Answer is entry point)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image10.png&quot; alt=&quot;image10&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenge description&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This was a very interesting challenge. I learned a new attack vector before the event was about to end. The challenge had zero solves, so we were given a clue, try to log in with a correct email address but a wrong password. I did that, and I was presented with an alert box saying that I had entered the wrong password, prompting me if I wanted to recover the password. So I proceeded and placed my email on the recover password page and was sent a recovery link in the email address I provided.&lt;/p&gt;

&lt;p&gt;Opening the email address in the browser, I was presented with a page where I was to set a new password to reset it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image11.png&quot; alt=&quot;image11&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Recover Password Page&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Looking at the URL link; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://159.203.60.168/recoverypassmy.php?id=9408&lt;/code&gt; seems like we can test for SQL injection. I proceeded to test, and my tool of choice was &lt;a href=&quot;https://github.com/sqlmapproject/sqlmap&quot;&gt;sqlmap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Command: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlmap -u URL -b&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image12.png&quot; alt=&quot;image12&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SQL Map&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Boom, we have an SQL injection present, and we have our entry point &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recoverpassmy.php&lt;/code&gt;&lt;/strong&gt;, our flag.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag3;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recoverpassmy.php&lt;/code&gt;&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;challenge-4-prove-yourself-exploit&quot;&gt;Challenge 4: Prove Yourself, Exploit!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image13.png&quot; alt=&quot;image13&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall4: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenge description&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the next challenge, I used the SQL injection to enumerate the tables in the database, then found an admin table, dumped its contents, and found the md5hash for the admin.&lt;/p&gt;

&lt;p&gt;Command for enumerating DB tables: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlmap -u URL --tables&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image14.png&quot; alt=&quot;image14&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall4: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerated tables&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Command for dumping table contents: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlmap -u URL --dump -D homepesa -T admin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image15.png&quot; alt=&quot;image15&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall4: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Admin table contents&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag4;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e64b78fc3bc91bcbc7dc232ba8ec59e0&lt;/code&gt;&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;challenge-5-lets-catthehash&quot;&gt;Challenge 5: Let‚Äôs catthehash&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image16.png&quot; alt=&quot;image16&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall5: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenge description&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will be short. Md5 hash isn‚Äôt the best encryption. The best thing about sqlmap is that it‚Äôs capable of decrypting/cracking hashes with either a custom (which you feed it) or default wordlist. But there are also other ways of decrypting md5 hashes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image17.png&quot; alt=&quot;image17&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall5: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlmap brute-forcing md5 hash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag5;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Admin123&lt;/code&gt;&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;challenge-6-our-sms-gateway-pwned&quot;&gt;Challenge 6: Our SMS Gateway Pwned??&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image18.png&quot; alt=&quot;image18&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall6: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenge description&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Obtaining the flag for the last challenge was tough. I stared at the code for a while, and the way I found the flag was more on checking each class involved in sending SMS.&lt;/p&gt;

&lt;p&gt;I would love to point out that the way I solved this challenge was not the proper way from the creator‚Äôs point of view. He mentioned that one had to intercept or do a man-in-the-middle attack on the SMS request to solve the challenge. For me, I found the flag hardcoded in the code.&lt;/p&gt;

&lt;p&gt;The issue being SMS gateway owned, SMS-gateway qual to an API, this being my theory I looked at various classes starting from the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MobilesasaClient&lt;/code&gt;&lt;/strong&gt; class where it has a field for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag 3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image19.png&quot; alt=&quot;image19&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall6: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MobilesasaClient Class&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When I saw this, I knew that I was close. So I decided to look at the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySMSBroadcastReceiver&lt;/code&gt;&lt;/strong&gt; class, where there was nothing interesting. But after sitting down and looking at the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MobilesasaClient&lt;/code&gt;&lt;/strong&gt; class, I noticed a small detail I had missed &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendSMS&lt;/code&gt;&lt;/strong&gt;. I used that to query for any other string containing the exact string and found the flag in the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfirmPhone&lt;/code&gt;&lt;/strong&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020-02-24/image20.png&quot; alt=&quot;image20&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;chall6: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfirmPhone class with flag&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag6:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N37w0rk@n@lysisM0bileS@s@&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As we can note, the flag states we should have done a network analysis to solve the challenge. Next time I will have that in mind.&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;I enjoyed solving the challenges where I got the opportunity to learn something new. I would love to thank the creator &lt;a href=&quot;https://twitter.com/shellcode254&quot;&gt;@shellcode254&lt;/a&gt;¬†and the &lt;a href=&quot;https://twitter.com/AfricaHackon&quot;&gt;@AfricaHackon&lt;/a&gt; team.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The following will get you started, Enjoy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nelenkov.blogspot.com/&quot;&gt;Android Explorations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nixawk/pentest-wiki/tree/master/2.Vulnerability-Assessment/Android-Assessment&quot;&gt;Android Hacking and Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tanprathan/MobileApp-Pentest-Cheatsheet&quot;&gt;Mobile App Pentest Cheatsheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ashishb/android-security-awesome&quot;&gt;Awesome Android Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/B3nac/Android-Reports-and-Resources&quot;&gt;Android Reports and Resources&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tthtlc.wordpress.com/2011/09/01/static-analysis-of-android-applications/&quot;&gt;Static Analysis of android applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/papers/26620&quot;&gt;Mobile Application Hacking Diary Ep.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/papers/44145&quot;&gt;Mobile Application Hacking Diary Ep.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mulliner.org/android/&quot;&gt;Android Stuff and Security Research&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xtiankisutsa/awesome-mobile-CTF&quot;&gt;Mobile App CTFs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://androidtamer.com/learn_android_security&quot;&gt;Learn Android Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://android.jlelse.eu/hacking-android-app-with-frida-a85516f4f8b7&quot;&gt;Hacking Android Apps with Frida&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerone.com/blog/androidhackingmonth-intro-to-android-hacking&quot;&gt;Introduction to Android Hacking by @0XTEKNOGEEK&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mobile-security.gitbook.io/mobile-security-testing-guide/&quot;&gt;Mobile Security Testing Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hacker101.com/sessions/mobile_crash_course.html&quot;&gt;Mobile Hacking Crash Course&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/s0md3v/status/1150845512838332416&quot;&gt;Somedev‚Äôs Way&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/fs0c131y/status/1129680329994907648&quot;&gt;Elliot Alderson Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>th3gr00t</name></author><category term="ctf" /><category term="re" /><category term="appsec" /><summary type="html">Aplogoies for any rough images, they were migrated from blogger.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2020-02-24/image1.gif" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2020-02-24/image1.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rabbit Hole Adventures: AppSec Teaser</title><link href="http://localhost:4000/blog/scripts/2019-04-17-rabbit-hole-adventures-appsec-teaser/" rel="alternate" type="text/html" title="Rabbit Hole Adventures: AppSec Teaser" /><published>2019-04-17T00:00:00+03:00</published><updated>2019-04-17T00:00:00+03:00</updated><id>http://localhost:4000/blog/scripts/rabbit-hole-adventures-appsec-teaser</id><content type="html" xml:base="http://localhost:4000/blog/scripts/2019-04-17-rabbit-hole-adventures-appsec-teaser/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prologue&quot; id=&quot;markdown-toc-prologue&quot;&gt;Prologue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lessons&quot; id=&quot;markdown-toc-lessons&quot;&gt;Lessons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#epilogue&quot; id=&quot;markdown-toc-epilogue&quot;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;

&lt;p class=&quot;note&quot; title=&quot;Warning&quot;&gt;This is just a teaser and the adventure will be short, but I do hope you will join me on this journey.&lt;/p&gt;

&lt;p&gt;Mobile applications, while we use them every day I had one main goal to learn how to identify vulnerabilities. Heads to google chrome, and enter text; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tools for mobile security&lt;/code&gt; into the search bar. Well, that was the wrong way of starting it but it got me somewhere.&lt;/p&gt;

&lt;p&gt;While learning how to review a mobile application if you are in my shoes right now reading this blog looking for a tool to do so out of the box, just stop right there ‚õî‚õî‚õî.&lt;/p&gt;

&lt;p&gt;In this blog post, I am going to give four lessons that I learned¬†and will be using in my everyday engagements.&lt;/p&gt;

&lt;h2 id=&quot;lessons&quot;&gt;Lessons&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Lesson 1;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set your goals&lt;/code&gt;; having a set of goals allows you to narrow your research and be precise about what you are looking for. (&lt;strong&gt;Example;&lt;/strong&gt;¬†what kind of test do you want to conduct and why).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lesson 2;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cover the basics&lt;/code&gt;; you have to know what the application does, how it works and how the functions were implemented for them to work. (&lt;strong&gt;Example;&lt;/strong&gt; what is SSL pinning and how does it work).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lesson 3;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Take your time to read and understand&lt;/code&gt;; once you have learned and grasped a¬†concept the road will be easy for you to practically give it a try. If you have got the time you can create a small application that is implementing SSL pinning or you can draw how SSL pinning works down on a sketchbook.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lesson 4;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Do it manually first&lt;/code&gt;; this is something my friends who have grasped unique techniques have iterated each time when we have a sit down with them, that before you go ahead and run a tool, first try doing it manually.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;Before I got to learn what application security is, I felt like I had a hammer and never knew where to start to look for holes to break. I got to learn this the hard way and I am proud that everything was a success, It was interesting and I will take this knowledge and finish a mobile application CTF series I have been sitting on, for a while now.&lt;/p&gt;

&lt;p&gt;This time I don‚Äôt have any resources to share but I would be happy if you would share any resources to keep me going on this journey, here is my Twitter handle &lt;a href=&quot;https://twitter.com/th3_gr00t&quot;&gt;@th3_gr00t&lt;/a&gt;.&lt;/p&gt;</content><author><name>th3gr00t</name></author><category term="scripts" /><category term="appsec" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2019-04-17/image1.png" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2019-04-17/image1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">USIU-CTF-2019</title><link href="http://localhost:4000/blog/ctf/2019-03-13-usiu-ctf-2019/" rel="alternate" type="text/html" title="USIU-CTF-2019" /><published>2019-03-13T00:00:00+03:00</published><updated>2019-03-13T00:00:00+03:00</updated><id>http://localhost:4000/blog/ctf/usiu-ctf-2019</id><content type="html" xml:base="http://localhost:4000/blog/ctf/2019-03-13-usiu-ctf-2019/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prologue&quot; id=&quot;markdown-toc-prologue&quot;&gt;Prologue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#challenges&quot; id=&quot;markdown-toc-challenges&quot;&gt;Challenges&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#category-1-miscellaneous&quot; id=&quot;markdown-toc-category-1-miscellaneous&quot;&gt;Category 1 &lt;em&gt;Miscellaneous&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#category-2-general&quot; id=&quot;markdown-toc-category-2-general&quot;&gt;Category 2: &lt;em&gt;General&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#category-3-steganography&quot; id=&quot;markdown-toc-category-3-steganography&quot;&gt;Category 3: &lt;em&gt;Steganography&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;

&lt;p&gt;It‚Äôs a new year, and this year requires a different me. In this blog post, I will be showcasing the CTF challenges I created for the USIU hackathon event this year. It was an amazing experience, and due to time and other constraints, I never got the opportunity to create a lot of challenges. The ideas were there, trust me.&lt;/p&gt;

&lt;p&gt;Having graduated from USIU last year (&lt;a href=&quot;https://twitter.com/th3_gr00t/status/1046028164537954304&quot;&gt;this-is-me&lt;/a&gt;), I was contacted and allowed to create another challenge for the students in the information security class to tackle, and I accepted the challenge.&lt;/p&gt;

&lt;p&gt;This year I had to do things differently despite the time they had contacted me. It wasn‚Äôt easy because CTF creation isn‚Äôt a one, two, and three work. It requires a lot of time, google kung-fu, and foundation mastery. I also never had an idea of the number of people who were going to participate and their skill level, and that is why I decided to keep it simple as an introductory CTF.&lt;/p&gt;

&lt;p&gt;Resources used; Azure VM (yeah, I roll like that üòÇüòÇüòÇüòÇ), &lt;a href=&quot;https://ctfd.io/about/&quot;&gt;CTFd&lt;/a&gt;¬†deployed in the VM, Ubuntu VM on my local machine for creating the challenges, CherryTree for taking notes, and well, my brain üòÖüòÖüòÖüòÖ&lt;/p&gt;

&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;/h2&gt;

&lt;p&gt;There were three categories of challenges;&lt;/p&gt;

&lt;h2 id=&quot;category-1-miscellaneous&quot;&gt;Category 1 &lt;em&gt;Miscellaneous&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;This category contained three challenges where the first challenge was more on basic foundations (&lt;em&gt;easy&lt;/em&gt;), the second challenge was on OSINT (&lt;em&gt;easy&lt;/em&gt;), and the third challenge was on cryptography (&lt;em&gt;medium&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&quot;category-2-general&quot;&gt;Category 2: &lt;em&gt;General&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;The second category also contained three challenges; where the first challenge contained a text file that had the flag inside it, and one was required to retrieve it (&lt;em&gt;easy&lt;/em&gt;). The second challenge was almost like the first challenge, but with a twist (&lt;em&gt;easy&lt;/em&gt;), there were two text files where one had the flag, and the third challenge was a zip file that was password protected with files where one had the password, and the other one contained the flag (&lt;em&gt;hard&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&quot;category-3-steganography&quot;&gt;Category 3: &lt;em&gt;Steganography&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;The last category contained two challenges where the first challenge was a gif photo (&lt;em&gt;easy&lt;/em&gt;) and the second challenge was a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.hc&lt;/code&gt; file that contained some nice little goodies inside (&lt;em&gt;medium&lt;/em&gt;).&lt;/p&gt;

&lt;p class=&quot;note&quot; title=&quot;Flag Format&quot;&gt;usiuctf{flag}&lt;/p&gt;

&lt;p class=&quot;text-align-center faded&quot;&gt;Below are images to showcase how the playground looked like, with the challenges.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2019-03-13/image2.png&quot; alt=&quot;image2&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;welcome page&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2019-03-13/image3.png&quot; alt=&quot;image3&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;Challenges&lt;/p&gt;

&lt;p&gt;I want to congratulate the &lt;a href=&quot;https://twitter.com/AbdiHacks/status/1102219256517877760&quot;&gt;USIU team&lt;/a&gt; for winning the CTF. I will post the challenges on my GitHub with hints to solve them.&lt;/p&gt;

&lt;p class=&quot;note&quot; Title=&quot;Announcement&quot;&gt;Do try and solve the last challenge on steg. Some goodies are waiting for you.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://resources.infosecinstitute.com/tools-of-trade-and-resources-to-prepare-in-a-hacker-ctf-competition-or-challenge/&quot;&gt;CTF Preparation&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://th33gr00t.blogspot.com/2018/09/mfctfb.html&quot;&gt;2018 USIU CTF&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iAmG-r00t/CTF-Reports/tree/master/USIU-CTF-2019&quot;&gt;Challenges with Hints&lt;/a&gt; on GitHub.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>th3gr00t</name></author><category term="ctf" /><category term="create" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2019-03-13/image1.gif" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2019-03-13/image1.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">OSINT C.T.F: Learning it the Better Way</title><link href="http://localhost:4000/blog/ctf/2018-10-17-osint-ctf-learning-it-better-way/" rel="alternate" type="text/html" title="OSINT C.T.F: Learning it the Better Way" /><published>2018-10-17T00:00:00+03:00</published><updated>2018-10-17T00:00:00+03:00</updated><id>http://localhost:4000/blog/ctf/osint-ctf-learning-it-better-way</id><content type="html" xml:base="http://localhost:4000/blog/ctf/2018-10-17-osint-ctf-learning-it-better-way/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#prologue&quot; id=&quot;markdown-toc-prologue&quot;&gt;Prologue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-challenge&quot; id=&quot;markdown-toc-the-challenge&quot;&gt;The Challenge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#epilogue&quot; id=&quot;markdown-toc-epilogue&quot;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O&lt;/code&gt;pen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S&lt;/code&gt;ource &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INT&lt;/code&gt;telligence, is a technique of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collecting data from publicly available sources to produce actionable intelligence&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While roaming the internet space, I came by a YT video titled; open-source intelligence, what I learned being an OSINT creeper by Josh Huff. After watching the video, I was excited and eager to learn more. I proceeded to give it a try, but after a few trials, I felt like I had no grip on the methodology presented by Josh.&lt;/p&gt;

&lt;div class=&quot;youtube-wrapper&quot; style=&quot;padding-top: 2em&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/6kBOCnOlwqI&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p style=&quot;padding-top: 2em&quot;&gt;Maybe I would find a CTF challenge on OSINT that I could solve, but there wasn‚Äôt any. Most of the challenges I found were by DEFCON, and they were on site but had taken recordings which I binged on them for a while. A few minutes later, I had a light bulb moment; why don‚Äôt I create my challenge. Ding!! Ding!! Ding!!&lt;/p&gt;

&lt;p&gt;Excitement and fear rushed through my veins. I went ahead to prepare a storyline and did some research to make the challenge solvable.&lt;/p&gt;

&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;The platform I decided to use for hosting the challenge was the Facebook C.T.F (F.B.C.T.F). It was quite easy to set up; however, if you have some other service using port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt;, I would advise you to either shut down the running service or change the Apache service port from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1234&lt;/code&gt; on the configuration file.&lt;/p&gt;

&lt;p&gt;The storyline creation process was quite a challenge because I had to use publicly accessible data to correlate and make a story out of them. The storyline I came up with was of a young boy who was an orphan, being moved from one orphanage to another with him, always seeking to find a place he could call home. Later on, he sought vengeance on a former colleague who used to be at his sanctuary place for destroying the home‚Äôs reputation.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;while re-writing this post, I noticed the storyline was vague, but it was what I had at that moment.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/iAmG-r00t/OSINT-CTF/blob/master/PWN3RS%20OSINT%20CTF%20GUIDE.pdf&quot;&gt;guide&lt;/a&gt; was provided to the players, where they were to follow a specific path from one country to the other while solving all seven levels.&lt;/p&gt;

&lt;p&gt;Apart from the guide, a methodology (borrowed from Josh Huff‚Äôs talk) and a link to the OSINT framework were provided.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Starting with the Known Data points.&lt;/li&gt;
  &lt;li&gt;Setting your Intelligence goals.&lt;/li&gt;
  &lt;li&gt;Gathering your tools.&lt;/li&gt;
  &lt;li&gt;Analyze how your data points are connected.&lt;/li&gt;
  &lt;li&gt;Pivoting, using new data points.&lt;/li&gt;
  &lt;li&gt;Repeat steps &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Validate if your target data is correct.&lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;text-align-center faded&quot;&gt;Below are images to showcase how the playground looked like, with the challenges.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-10-17/image2.png&quot; alt=&quot;image2&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;FBCTF Dashboard&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-10-17/image3.png&quot; alt=&quot;image3&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;FBCTF Task&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;It was an amazing experience. I got the opportunity to create something that allowed me to learn and share my knowledge. I am looking forward to doing more of this on different topics.&lt;/p&gt;

&lt;p&gt;The first player who completed the challenge was &lt;a href=&quot;https://twitter.com/AntonyMutiga&quot;&gt;Antony&lt;/a&gt; Mutiga](https://twitter.com/AntonyMutiga). His write-up is attached in the resources section (the funny thing is that he was my teammate at the AfricaHackOn CTF event 2018, a story for another day).&lt;/p&gt;

&lt;p&gt;I am happy to say this was a success, and I have provided all the configs of the challenge for anyone who wants to set it up.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;The OSINT framework is enough to guide you in solving the challenges. Give it a try.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://osintframework.com/&quot;&gt;OSINT Framework.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;What I learned by being an OSINT creeper &lt;a href=&quot;https://www.youtube.com/watch?v=6kBOCnOlwqI&quot;&gt;John Huff&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/fbctf&quot;&gt;FBCTF&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;FBCTF (&lt;a href=&quot;https://github.com/iAmG-r00t/OSINT-CTF&quot;&gt;Categories and Challenges&lt;/a&gt;) Export.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iAmG-r00t/OSINT-CTF&quot;&gt;Write-up&lt;/a&gt;¬†by &lt;a href=&quot;https://twitter.com/AntonyMutiga&quot;&gt;@AntonyMutiga&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>th3gr00t</name></author><category term="ctf" /><category term="create" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2018-10-17/image1.png" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2018-10-17/image1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">My SimpleBoot2Root CTF</title><link href="http://localhost:4000/blog/ctf/2018-09-11-mfctfb/" rel="alternate" type="text/html" title="My SimpleBoot2Root CTF" /><published>2018-09-11T00:00:00+03:00</published><updated>2018-09-11T00:00:00+03:00</updated><id>http://localhost:4000/blog/ctf/mfctfb</id><content type="html" xml:base="http://localhost:4000/blog/ctf/2018-09-11-mfctfb/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#background&quot; id=&quot;markdown-toc-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#capture-the-flag&quot; id=&quot;markdown-toc-capture-the-flag&quot;&gt;Capture The Flag&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#my-first-ctf-build&quot; id=&quot;markdown-toc-my-first-ctf-build&quot;&gt;My First CTF Build&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#assignment&quot; id=&quot;markdown-toc-assignment&quot;&gt;Assignment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I had a blog where I had posted posts on what a CTF is and a write-up of this CTF. The blog encountered some technical issues that led to creating a new one; due to my laziness, I will not do another whole write-up for this CTF. I want to explain what a CTF is and what led me to create this CTF and leave an assignment for you.&lt;/p&gt;

&lt;h2 id=&quot;capture-the-flag&quot;&gt;Capture The Flag&lt;/h2&gt;

&lt;p&gt;A Capture the Flag; &lt;strong&gt;CTF&lt;/strong&gt; is a kind of information security competition that enables someone interested in learning cyber security to build and polish up their skills. CTFs allowed me to learn how to hack and get into the cyber security field.&lt;/p&gt;

&lt;p&gt;Being a competition means there are various types of challenges from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web application&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverse engineering&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cryptography&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary exploitation&lt;/code&gt; (referred to as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwn&lt;/code&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forensics&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miscellaneous&lt;/code&gt; involved for the challenger to solve and win prizes.&lt;/p&gt;

&lt;div class=&quot;youtube-wrapper&quot; style=&quot;padding-top: 2em&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/8ev9ZX9J45A&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;my-first-ctf-build&quot;&gt;My First CTF Build&lt;/h2&gt;

&lt;p&gt;The third-year semester year 2017 was the first time I encountered a CTF challenge. I was a sucker for being spoon-fed most of the time, and it was rough, but I guess everyone‚Äôs first encounter is likely to be the same.&lt;/p&gt;

&lt;p&gt;I only had two classes to attend for a whole three-month period, and with all that free time, I got the opportunity to sharpen my wits. I started with &lt;a href=&quot;http://overthewire.org/wargames/&quot;&gt;OverTheWire Wargames&lt;/a&gt; Bandit, then went ahead to pwning several built virtual machines from &lt;a href=&quot;https://www.vulnhub.com/&quot;&gt;Vulnerable by Design: Vulnhub&lt;/a&gt;, and also participated in a few online CTF competitions.&lt;/p&gt;

&lt;p&gt;During the semester, there was an upcoming Hackathon event at the university, and I used to dislike such event‚Äôs because they focused on developers and neglected information security students. That being the case, I decided to chat with the organizers, who allowed me to create a simple Boot2Root challenge.&lt;/p&gt;

&lt;p&gt;The CTF I created was a vulnerable machine that I had solved and gained 100% root access. I enjoyed the struggle of solving it and tweaking it, and the challengers who participated in the event had a good time solving it too.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;The challenge contained clues that assisted the challenger in acquiring the next flag.&lt;/p&gt;

&lt;p&gt;I want to give credit to &lt;a href=&quot;https://twitter.com/@RobertWinkel&quot;&gt;Robert Winkel&lt;/a&gt;, it was his vulnerable machine challenge that got me started.&lt;/p&gt;

&lt;h2 id=&quot;assignment&quot;&gt;Assignment&lt;/h2&gt;

&lt;p&gt;I will leave you a challenge, solve the CTF, write an excellent write-up, and I will add it here on the resources links. You might never know where it will take you.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;The hacking methodology will be your guide. Don‚Äôt overthink, don‚Äôt be in a hurry, and the clues are there for a reason. &lt;a href=&quot;https://drive.google.com/open?id=1JeNyE5hTNon6FRE-n4QnqLnjZMCdBl8C&quot;&gt;LINK¬†&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;text-align-center faded&quot;&gt;I hope you enjoy the Challenge, and Feel free to contact me.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://resources.infosecinstitute.com/tools-of-trade-and-resources-to-prepare-in-a-hacker-ctf-competition-or-challenge/&quot;&gt;All in One Resource&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hackingarticles.in/capture-flag-challenges/&quot;&gt;Capture The Flag Challenges&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://captf.com/practice-ctf/&quot;&gt;Practice List&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/rfjV8XukxO8&quot;&gt;Play CTF, a great way to learn Hacking&lt;/a&gt; by Liveoverflow&lt;/li&gt;
&lt;/ol&gt;</content><author><name>th3gr00t</name></author><category term="ctf" /><category term="create" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2018-09-11/image1.png" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2018-09-11/image1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Radare2 Adventures: Level1-crackMe</title><link href="http://localhost:4000/blog/ctf/2018-09-06-radare-adventures-level1-crackme/" rel="alternate" type="text/html" title="Radare2 Adventures: Level1-crackMe" /><published>2018-09-06T00:00:00+03:00</published><updated>2018-09-06T00:00:00+03:00</updated><id>http://localhost:4000/blog/ctf/radare-adventures-level1-crackme</id><content type="html" xml:base="http://localhost:4000/blog/ctf/2018-09-06-radare-adventures-level1-crackme/">&lt;p class=&quot;note&quot; title=&quot;APOLOGY&quot;&gt;Aplogoies for any rough images, they were migrated from blogger.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot; id=&quot;markdown-toc-intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#file-format&quot; id=&quot;markdown-toc-file-format&quot;&gt;File format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-the-file&quot; id=&quot;markdown-toc-running-the-file&quot;&gt;Running the file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#strings&quot; id=&quot;markdown-toc-strings&quot;&gt;Strings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reversing&quot; id=&quot;markdown-toc-reversing&quot;&gt;Reversing&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#analysis&quot; id=&quot;markdown-toc-analysis&quot;&gt;Analysis&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#disassembly&quot; id=&quot;markdown-toc-disassembly&quot;&gt;Disassembly&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#first-function-systemv&quot; id=&quot;markdown-toc-first-function-systemv&quot;&gt;First function: systemv&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#second-function-systemo&quot; id=&quot;markdown-toc-second-function-systemo&quot;&gt;Second function: systemo&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#solving&quot; id=&quot;markdown-toc-solving&quot;&gt;Solving&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bonus&quot; id=&quot;markdown-toc-bonus&quot;&gt;Bonus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;I am excited right now.&lt;/p&gt;

&lt;p&gt;After my first interaction with a CTF challenge on Reverse Engineering at Africa HackOn 2018, I fell in love. Many things came to mind on the capabilities one can do with such a skill. This post will share the basic need to know with an example. The learning curve will be steep; you might end up in a rabbit hole from researching from one place to the other.&lt;/p&gt;

&lt;p class=&quot;note&quot; title=&quot;Advice&quot;&gt;Don‚Äôt overthink; relax. After a couple of tries, you will get the hang of it, and remember always to perfect your craft (&lt;strong&gt;Practice&lt;/strong&gt;, &lt;strong&gt;Practice&lt;/strong&gt;, &lt;strong&gt;Practice&lt;/strong&gt;). &lt;a href=&quot;https://twitter.com/LiveOverflow/status/1037296510583689216&quot;&gt;LiveOverflow‚Äôs Tips to Master Something&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what is Reverse Engineering; it‚Äôs the process of &lt;strong&gt;Acquiring&lt;/strong&gt; anything artificial,¬†&lt;strong&gt;Analyzing&lt;/strong&gt;&lt;strong&gt;¬†it, and then¬†&lt;/strong&gt;Disassembling&lt;em&gt;**&lt;/em&gt; to understand how it works and acquire any informative knowledge about it.&lt;/p&gt;

&lt;p&gt;We have a &lt;a href=&quot;https://www.webopedia.com/TERM/B/binary_file.html&quot;&gt;binary file&lt;/a&gt; named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CrackMe1.bin&lt;/code&gt;, a program that has been compiled and converted to machine code.&lt;/p&gt;

&lt;p&gt;When given such a file, I usually perform a few steps before opening it with Radare2, IDA, or binary ninja (disassembly tools).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Confirm the &lt;a href=&quot;https://en.wikipedia.org/wiki/File_format&quot;&gt;file format&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Execute the file to understand what task you are given to solve.&lt;/li&gt;
  &lt;li&gt;Check the &lt;a href=&quot;https://en.wikipedia.org/wiki/String_(computer_science)&quot;&gt;data strings&lt;/a&gt; of the file.¬†&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;file-format&quot;&gt;File format&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image2.png&quot; alt=&quot;imag2&quot; width=&quot;1000px&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;img-1: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file crackMe1.bin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On linux you can use the Linux &lt;a href=&quot;https://en.wikipedia.org/wiki/File_(command)&quot;&gt;file&lt;/a&gt; command or using &lt;a href=&quot;https://r2wiki.readthedocs.io/en/latest/tools/rabin2/&quot;&gt;rabin2&lt;/a&gt;, Radare2 tool for extracting information from binary programs.&lt;/p&gt;

&lt;p style=&quot;padding-top: 4em&quot;&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image3.png&quot; alt=&quot;image3&quot; class=&quot;align-right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-I&lt;/code&gt; option is for extracting binary information. So we have an &lt;a href=&quot;https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/&quot;&gt;ELF&lt;/a&gt; (Executable and Linkable Format) class 64 binary file. Take note that we are going to use this information later on.&lt;/p&gt;

&lt;p&gt;Another way of checking file format that mostly comes in handy when dealing with embedded data is to open the file in a hex editor, identify the &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_file_signatures&quot;&gt;file&lt;/a&gt; header signatures, and extract the embedded data.&lt;/p&gt;

&lt;p style=&quot;padding-top: 20em&quot; class=&quot;figcaption&quot;&gt;img-2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rabin2 -I crackMe1.bin&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;running-the-file&quot;&gt;Running the file&lt;/h2&gt;

&lt;p&gt;Binary files require execution rights to be added so that they can be executed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# checking for execution rights&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; crackMe1.bin
&lt;span class=&quot;c&quot;&gt;# giving execution right to binary file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x crackMe1.bin
&lt;span class=&quot;c&quot;&gt;# executing the file&lt;/span&gt;
./crackMe1.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image4.png&quot; alt=&quot;image4&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;img-3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;running the binary file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So when running the file, you will be prompted for a password, and when you type in anything like &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1234&lt;/code&gt;&lt;/strong&gt;,¬†it will return a Bad password string output.&lt;/p&gt;

&lt;h2 id=&quot;strings&quot;&gt;Strings&lt;/h2&gt;

&lt;p&gt;The above image shows that the program outputs several words, but the word password is the most common. Hence while analyzing the program strings, we are going to search for lines that contain the string &lt;strong class=&quot;text-color-red&quot;&gt;password&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are two methods of doing this: the &lt;a href=&quot;https://linux.die.net/man/1/strings&quot;&gt;strings&lt;/a&gt; UNIX command or our tool of choice, radare2, as shown in this &lt;a href=&quot;#strings-using-r2&quot;&gt;section&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So because we know we have a bad password string, let‚Äôs try and see if we have any other data string with the password string.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image5.png&quot; alt=&quot;image5&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;img-4: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strings crackMe1.bin | grep &quot;password&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good password&lt;/strong&gt;, so our main goal is to get the correct password.&lt;/p&gt;

&lt;p&gt;When I started learning reverse engineering, my tool of choice was IDA until I met &lt;a href=&quot;https://www.radare.org/n/&quot;&gt;Radare2&lt;/a&gt;, and hence this post. I am still learning, and to be honest, the image below says it all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image6.jpg&quot; alt=&quot;image6&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reversing&quot;&gt;Reversing&lt;/h2&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;analysis&quot;&gt;Analysis&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image7.png&quot; alt=&quot;image7&quot; class=&quot;align-left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we begin by examining the file by executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r2 crackMe1.bin&lt;/code&gt;. Currently, we are in shell mode, where we can run our commands, and by default, we are taken at the entry address &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[0x000008a0]&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The first command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ie&lt;/code&gt; is the entry points info command, which prints the entry points.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image8.png&quot; alt=&quot;image8&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, analyzing the program using the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaa&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a?&lt;/code&gt;; gives you different command options).  Remember not to skip this bit because radare2 doesn‚Äôt analyze automatically by default, but you can run this command when running the binary file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# this will allow us to avoid running aaa&lt;/span&gt;
r2 &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; CrackMe1.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image9.png&quot; alt=&quot;image8&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p id=&quot;strings-using-r2&quot;&gt;Next step is to view strings and find our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;good password&lt;/code&gt; string location address.&lt;/p&gt;

&lt;p style=&quot;padding-top: 1em&quot;&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image10.png&quot; alt=&quot;image9&quot; class=&quot;align-right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After analyzing all flags, we can list them using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs&lt;/code&gt; command, which means flag space. As we can see, we have a strings flag space, and we proceed to view its contents using the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs strings; f&lt;/code&gt; (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt; option is used to print contents).&lt;/p&gt;

&lt;p&gt;It prints each string starting with its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;address location&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt;, and the actual string.&lt;/p&gt;

&lt;p style=&quot;padding-top: 5em&quot;&gt;Next we are going to find the code reference for our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str.Good_password&lt;/code&gt; reference.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;axt @@ str.Good_password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image11.png&quot; alt=&quot;image10&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;disassembly&quot;&gt;Disassembly&lt;/h3&gt;

&lt;p&gt;The fun part is disassembling the program.&lt;/p&gt;

&lt;p&gt;In every program, we have a global function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, which serves as the starting point for the program execution. The program will also allow us to understand the program execution.&lt;/p&gt;

&lt;p&gt;That being the case, we will enter the main function using the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s main; pdf&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; means to seek, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pdf&lt;/code&gt;` command disassembles the function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image12.png&quot; alt=&quot;image11&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;Before we understand our function, know that we are currently looking at the assembly language. You, as a reader, are required to have a basic understanding of the &lt;strong&gt;stack&lt;/strong&gt; and how it works, know how to read assembly language, and have basic knowledge of &lt;strong&gt;C&lt;/strong&gt; and &lt;strong&gt;C++&lt;/strong&gt; programming languages.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;; main func&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;; store base pointer in the stack&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;; make the stack pointer the new base pointer&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;sym.systemv&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;; call function systemv&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;sym.systemo&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;; call function systemo after systemv has ended&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;; move zero to register eax&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;; get the old base pointer&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;; return - end of program&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The program starts by pushing the base pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp&lt;/code&gt; to the top of the stack, then makes the stack pointer the new base pointer. Proceeds to call two functions &lt;strong&gt;sym.systemv&lt;/strong&gt; and &lt;strong&gt;sym.systemo&lt;/strong&gt;, then move 0 to the accumulator register (&lt;strong&gt;eax&lt;/strong&gt;), get the base pointer from the top of the stack, and perform a subroutine return (&lt;strong&gt;ret&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;So we are going to focus on the two functions being called.&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;first-function-systemv&quot;&gt;First function: systemv&lt;/h3&gt;

&lt;p&gt;From the code below, we can note the function‚Äôs main purpose is to set the variables.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image13.png&quot; alt=&quot;image12&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;; systemv func&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;; routine command&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;; routine command&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_4h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;; mov the 32-bit int rep of 5 into the 4bytes stack-location&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_8h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;; mov the 32-bit int rep of 7 into the 4bytes stack-location&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1f5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; mov the 32-bit int rep of hex 0x1f5 == 105 into the 4bytes stack-location&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;nop&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;; nop-sled&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;                       &lt;span class=&quot;c1&quot;&gt;; routine command&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;; return end of program&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To convert a hexadecimal value in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r2&lt;/code&gt; you can do the following in  the shell: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;? 0x1f5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image14.png&quot; alt=&quot;image13&quot; class=&quot;align-left&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* current variables */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_4h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_8h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;note&quot; title=&quot;r2 Praise&quot;&gt;r2 can perform arithmetic calculations and convert hex to different data types as seen in the image on our left.&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;second-function-systemo&quot;&gt;Second function: systemo&lt;/h3&gt;

&lt;p&gt;So let‚Äôs go on ahead and see what the second function is doing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image15.png&quot; alt=&quot;image14&quot; class=&quot;lead&quot; width=&quot;1700px&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;note&quot; title=&quot;Attention&quot;&gt;The image is not visible, but I will fix that issue in future posts. Below is the whole code re-written when migrating from blogger.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;; just realized this is a c++ program date 03/05/22&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;; routine command&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;; routine command&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;; set up space in the stack of size 16bytes&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_8h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;; mov value 7 to eax&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_4h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;; add value 7 to value 5 at local_4h and store the result in local_4h&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_4h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;; mov value at local_4h to eax&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;imul&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2d&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;; multiply value at eax by 45 and store the result in eax (imul eax, 0x2d)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;; mov 32bit int rep of value at eax into the 4bytes stack-location&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_10h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;; mov 32bit int rep of value 0 into the 4bytes stack-location&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;qword&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str.Password&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;; load address of string Password to rsi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;something...&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;; print str.Password&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;qword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_10h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;; load address of stack variable [local_10h] to rax variable&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;; mov address at rax to rsi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;qword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x202060&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;; load address to rdi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;something...&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;; call function that will take user input&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_10h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;; mov 32bit int rep of value at local_10h to eax&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;cmp&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;; compare value at eax with value stored at local_ch&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;jne&lt;/span&gt;     &lt;span class=&quot;mh&quot;&gt;0xa62&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;; if compare is not equal, I think it will lead to print Bad password&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;qword&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str.Good_password&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;; load address of string Good_password to rsi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;qword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x202180&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;; load address 0x202180&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;something...&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;; call while passing two arguments rdi, rsi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the above code, we can see the second function contains our string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Good password&lt;/code&gt;; when I was writing this post in 2018, I had noted that I wasn‚Äôt going to explain the whole code but the essential bit of the code that led us to our string. 4years later, I can explain the entire code. I even found a quick way to solve this challenge when reading the code. Emphasize on &lt;strong&gt;keep practicing&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 class=&quot;text-align-center&quot; id=&quot;solving&quot;&gt;Solving&lt;/h3&gt;

&lt;p&gt;Because I am writting this post once more, I will do what I wasn‚Äôt able to do last time, explain everything. I believe this is a second chance so let me take advantage of it and show off.&lt;/p&gt;

&lt;p&gt;So the first function loads the values to variables later used in the second function. After getting our new base pointer, we can see the program is reserving space in the stack of size 0x10. It then moves the value stored at variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_8h&lt;/code&gt; to register &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt;, then adds the value at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; with the value stored at variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_4h&lt;/code&gt;. Then moves results of the addition to the register &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we proceed to multiply using the &lt;a href=&quot;http://www.c-jump.com/CIS77/reference/ISA/DDU0094.html&quot;&gt;imul&lt;/a&gt; instruction. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imul eax, eax, 0x2d&lt;/code&gt; is an extended hand for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imul eax, 0x2d&lt;/code&gt;, which takes the value stored at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; and multiplies it by  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x2d&lt;/code&gt;. Then holds the new value at register &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt;, which is then moved to variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_ch&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;local_8h &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 7
local_4h &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5
local_ch &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 501
local_10h &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; user_input

eax &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; local_8h
local_4h &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; local_4h + eax
eax &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; local_4h &lt;span class=&quot;c&quot;&gt;# 12&lt;/span&gt;
eax &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; eax &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 45 &lt;span class=&quot;c&quot;&gt;# 540&lt;/span&gt;
local_ch &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; eax &lt;span class=&quot;c&quot;&gt;# 540&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We you read the code above, the next few instructions executed allow the program to print &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Password&lt;/code&gt; and ask for user password input. Hence no need to explain them twice.&lt;/p&gt;

&lt;p&gt;After the user has keyed in his password, it is stored at variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_10h&lt;/code&gt;. Then later moved to register &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt;, which is compared to the value stored at variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_ch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image16.png&quot; alt=&quot;image15&quot; id=&quot;cmp&quot; class=&quot;centered&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If both values are equal, the next instruction executed will print &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Good password&lt;/code&gt;, resulting in us successfully solving the challenge. But if they are not equal, it will take a jump to address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xa62&lt;/code&gt;, which I think will print the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bad password&lt;/code&gt; as we had seen before while running the program.&lt;/p&gt;

&lt;p&gt;If you check the compare instruction, you can see we have our password at two variables; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_10h&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_ch&lt;/code&gt;. Where we already know the value for variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_ch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So our password is &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;540&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p class=&quot;text-align-center&quot;&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image17.png&quot; alt=&quot;image16&quot; /&gt;
&lt;img src=&quot;/assets/img/blog/2018-09-06/image18.png&quot; alt=&quot;image17&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figcaption&quot;&gt;r2 doing arithmetics&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2018-09-06/image19.png&quot; alt=&quot;image18&quot; class=&quot;align-left&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;note&quot; title=&quot;SUCCESS&quot;&gt;We have our password&lt;/p&gt;

&lt;h2 id=&quot;bonus&quot;&gt;Bonus&lt;/h2&gt;

&lt;details&gt;
&lt;summary&gt;Quick and easy solve&lt;/summary&gt;
&lt;div&gt;
    &lt;p&gt;Another quicker method of solving this challenge would be to set a breakpoint at the comparison instruction &lt;a href=&quot;#cmp&quot;&gt;cmp&lt;/a&gt; then view the value stored at variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_ch&lt;/code&gt; and boom we have the password. Quick and easy.&lt;/p&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;Translating the challenge to C&lt;/summary&gt;
&lt;div&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;atdioh&amp;gt;
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * main
*/&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;systemv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_4h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_8h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;105&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;systemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_10h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;local_ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_8h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;local_4h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_10h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_10h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Good password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bad password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;systemv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;systemo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
&lt;summary&gt;Resources&lt;/summary&gt;
&lt;div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;The following will get you started, Enjoy.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://twitter.com/megabeets_&quot;&gt;Megabeets&lt;/a&gt;; &lt;a href=&quot;https://www.megabeets.net/a-journey-into-radare-2-part-1/&quot;&gt;A journey into Radare2 - Part 1: simple crackme&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Sushant; &lt;a href=&quot;http://sushant94.me/2015/05/31/Introduction_to_radare2/&quot;&gt;An intro to radare2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.cs.virginia.edu/~evans/cs216/guides/x86.html&quot;&gt;x86 Assembly Guide&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Intel‚Äôs Intro to &lt;a href=&quot;https://software.intel.com/en-us/articles/introduction-to-x64-assembly/&quot;&gt;x64 Assembly&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Intro to &lt;a href=&quot;https://www3.nd.edu/~dthain/courses/cse40243/fall2015/intel-intro.html&quot;&gt;x86-64 Assembly for Compiler Writers&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;A good read &amp;gt; &lt;a href=&quot;https://sockpuppet.org/issue-79-file-0xb-foxport-hht-hacking.txt.html&quot;&gt;h3h3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Stack &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_(abstract_data_type)&quot;&gt;wiki&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.begin.re/&quot;&gt;RE for Beginners&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Radare2 &lt;a href=&quot;https://radare.gitbooks.io/radare2book/content/&quot;&gt;Git Book&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/div&gt;
&lt;/details&gt;

&lt;p class=&quot;text-align-center faded&quot;&gt;There we have it folks, easy as done, see you in the other realm.&lt;/p&gt;</content><author><name>th3gr00t</name></author><category term="ctf" /><category term="re" /><summary type="html">Aplogoies for any rough images, they were migrated from blogger.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/2018-09-06/image1.png" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/2018-09-06/image1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>